#
# DO NOT MODIFY!!!!
# This file is automatically generated by Racc 1.4.9
# from Racc grammer file "".
#

require 'racc/parser.rb'

require 'puppet'
require 'puppet/pops'

module Puppet
  class ParseError < Puppet::Error; end
  class ImportError < Racc::ParseError; end
  class AlreadyImportedError < ImportError; end
end

module Puppet
  module Pops
    module Parser
      class Parser < Racc::Parser

module_eval(<<'...end egrammar.ra/module_eval...', 'egrammar.ra', 779)

# Make emacs happy
# Local Variables:
# mode: ruby
# End:
...end egrammar.ra/module_eval...
##### State transition tables begin ###

clist = [
'63,66,275,-134,64,57,248,59,285,86,-225,-132,323,144,-234,255,308,260',
'259,275,254,234,234,109,15,113,234,108,363,134,43,250,50,133,52,47,373',
'51,76,72,369,45,75,48,49,-134,145,73,14,112,286,74,-225,-132,12,13,-234',
'268,130,93,92,231,77,134,88,89,241,133,44,274,338,87,71,67,275,69,70',
'68,270,271,53,54,56,55,63,66,134,58,64,57,133,59,405,94,134,253,306',
'86,133,134,252,63,66,133,257,64,134,258,15,284,133,109,341,113,43,108',
'50,282,52,47,134,51,76,72,133,45,75,48,49,343,81,73,14,345,358,74,357',
'112,12,13,82,84,83,85,63,66,77,298,64,57,299,59,44,358,300,357,71,67',
'284,69,70,251,350,351,53,54,56,55,15,352,234,58,245,355,43,122,50,359',
'52,47,361,51,76,72,79,45,75,48,49,245,230,73,14,282,284,74,282,325,12',
'13,370,306,294,216,293,217,77,291,219,295,289,288,44,290,292,306,71',
'67,221,69,70,220,215,296,53,54,56,55,63,66,197,58,64,57,81,59,403,86',
'164,218,297,380,307,161,382,159,284,282,135,385,122,109,15,113,123,108',
'322,122,43,389,50,361,52,47,391,51,76,72,392,45,75,48,49,393,394,73',
'14,112,395,74,119,397,12,13,398,399,326,93,92,81,77,78,88,89,406,407',
'44,408,409,87,71,67,,69,70,,,,53,54,56,55,63,66,,58,64,57,,59,401,94',
',,,86,,,,,,,,,,,15,,,109,,113,43,108,50,,52,47,,51,76,72,,45,75,48,49',
',,73,14,,,74,,112,12,13,,,,,63,66,77,,64,57,,59,44,,,,71,67,,69,70,',
',,53,54,56,55,15,,,58,,,43,,50,,52,115,,51,76,72,,45,75,,,,,73,14,,',
'74,,,12,13,,,,,63,66,77,,64,57,,59,44,,,,71,67,,69,70,,,,53,54,56,55',
'15,,,58,,,43,,50,,52,115,,51,76,72,,45,75,,,,,73,14,,,74,,,12,13,,,',
',63,66,77,,64,57,,59,44,,,,71,67,,69,70,,,,53,54,56,55,15,,,58,,,43',
',50,,52,115,,51,76,72,,45,75,,,,,73,14,,,74,,,12,13,,,,,63,66,77,,64',
'57,,59,44,,,,71,67,,69,70,,,,53,54,56,55,15,,,58,,,43,,50,,52,115,,51',
'76,72,,45,75,,,,,73,14,,,74,,,12,13,,,,,63,66,77,,64,57,,59,44,,,,71',
'67,,69,70,,,,53,54,56,55,15,,,58,,,43,,50,,52,115,,51,76,72,,45,75,',
',,,73,14,,,74,,,12,13,,,,,63,66,77,,64,57,,59,44,,,,71,67,,69,70,,,',
'53,54,56,55,15,,,58,,,43,,50,,52,47,,51,76,72,,45,75,48,49,,,73,14,',
',74,,,12,13,,,,,63,66,77,,64,57,,59,44,,,,71,67,,69,70,,,,53,54,56,55',
'15,,,58,,,43,,50,,52,115,,51,76,72,,45,75,,,,,73,14,,,74,,,12,13,,,',
',63,66,77,,64,57,,59,44,,,,71,67,,69,70,,,,53,54,56,55,15,,,58,,,43',
',50,,52,115,,51,76,72,,45,75,,,,,73,14,,,74,,,12,13,,,,,63,66,77,,64',
'57,,59,44,,,,71,67,,69,70,,,,53,54,56,55,15,,,58,,,43,,50,,52,115,,51',
'76,72,,45,75,,,,,73,14,,,74,,,12,13,,,,,63,66,77,,64,57,,59,44,,,,71',
'67,,69,70,,,,53,54,56,55,15,,,58,,,43,,50,,52,115,,51,76,72,,45,75,',
',,,73,14,,,74,,,12,13,,,,,63,66,77,,64,57,,59,44,,,,71,67,,69,70,,,',
'53,54,56,55,15,,,58,,,43,,50,,52,115,,51,76,72,,45,75,,,,,73,14,,,74',
',,12,13,,,,,63,66,77,,64,57,,59,44,,,,71,67,,69,70,,,,53,54,56,55,15',
',,58,,,43,,50,,52,129,,51,76,72,,45,75,,,,,73,14,,,74,,,12,13,,,,,63',
'66,77,,64,57,,59,44,,,,71,67,,69,70,,,,53,54,56,55,15,,,58,,,43,,50',
',52,115,,51,76,72,,45,75,,,,,73,14,,,74,,,12,13,,,,,63,66,77,,64,57',
',59,44,,,,71,67,,69,70,,,,53,54,56,55,15,,,58,,,43,,50,,52,115,,51,76',
'72,,45,75,,,,,73,14,,,74,,,12,13,,,,,63,66,77,,64,57,,59,44,,,,71,67',
',69,70,,,,53,54,56,55,15,,,58,,,43,,50,,52,115,,51,76,72,,45,75,,,,',
'73,14,,,74,,,12,13,,,,,63,66,77,,64,57,,59,44,,,,71,67,,69,70,,,,53',
'54,56,55,15,,,58,,,199,216,210,217,52,211,219,212,208,206,,201,214,',
',,,73,14,220,215,213,,,12,13,,,,,,,77,,,,,218,200,,,,71,67,,69,70,,',
',53,54,56,55,63,66,,58,64,57,148,59,,86,,,,,,,,,,,,,,109,15,113,,108',
',,43,,50,,52,115,,51,76,72,,45,75,,,,,73,14,112,,74,,,12,13,,,,,63,66',
'77,,64,57,150,59,44,,,87,71,67,,69,70,,,,53,54,56,55,15,,,58,,,43,,50',
',52,115,,51,76,72,,45,75,,,,,73,14,,,74,,86,12,13,,,,,,,77,,,,,109,44',
'113,,108,71,67,,69,70,,,,53,54,56,55,63,66,,58,64,57,,59,153,112,,,',
',,,,,,,,,,,15,,,,,,43,87,50,,52,115,,51,76,72,,45,75,,,,,73,14,,,74',
',,12,13,,,,,63,66,77,,64,57,,59,44,,,,71,67,,69,70,,,,53,54,56,55,15',
',,58,,,43,,50,,52,115,,51,76,72,,45,75,,,,,73,14,,,74,,,12,13,,,,,63',
'66,77,,64,57,,59,44,,,,71,67,,69,70,,,,53,54,56,55,15,,,58,,,43,,50',
',52,115,,51,76,72,,45,75,,,,,73,14,,,74,,,12,13,,,,,63,66,77,,64,57',
',59,44,,,,71,67,,69,70,,,,53,54,56,55,15,,,58,,,43,,50,,52,115,,51,76',
'72,,45,75,,,,,73,14,,,74,,,12,13,,,,,63,66,77,,64,57,,163,44,,,,71,67',
',69,70,,,,53,54,56,55,15,,,58,,,43,,50,,52,115,,51,76,72,,45,75,,,,',
'73,14,,,74,,,12,13,,,,,63,66,77,,64,57,,59,44,,,,71,67,,69,70,,,,53',
'54,56,55,15,,,58,,,43,,50,,52,115,,51,76,72,,45,75,,,,,73,14,,,74,,',
'12,13,,,,,63,66,77,,64,57,,59,44,,,,71,67,,69,70,,,,53,54,56,55,15,',
',58,,,43,,50,,52,47,,51,76,72,,45,75,48,49,,,73,14,,,74,,86,12,13,,',
',,,,77,,,,,109,44,113,,108,71,67,,69,70,,,,53,54,56,55,63,66,,58,64',
'57,,59,153,112,,,,86,,,,,,,,,,,15,,,109,,113,43,108,50,,52,47,,51,76',
'72,,45,75,48,49,,,73,14,,,74,,112,12,13,,,,,63,66,77,,64,57,,59,44,',
',,71,67,,69,70,,,,53,54,56,55,15,,,58,,,43,,50,,52,47,,51,76,72,,45',
'75,48,49,,,73,14,,,74,,,12,13,,,,,63,66,77,,64,57,,59,44,,,,71,67,,69',
'70,,,,53,54,56,55,15,,,58,,,43,,50,,52,47,,51,76,72,,45,75,48,49,,,73',
'14,,,74,,,12,13,,,,,63,66,77,,64,57,,59,44,,,,71,67,,69,70,,,,53,54',
'56,55,15,,,58,,,43,,50,,52,47,,51,76,72,,45,75,48,49,,,73,14,,,74,,',
'12,13,,,,,63,66,77,,64,57,,59,44,,,,71,67,,69,70,,,,53,54,56,55,15,',
',58,,,43,,50,,52,47,,51,76,72,,45,75,48,49,,,73,14,,,74,,,12,13,,,,',
'63,66,77,,64,57,,59,44,,,,71,67,,69,70,,,,53,54,56,55,15,,,58,,,43,',
'50,,52,47,,51,76,72,,45,75,48,49,,,73,14,,,74,,,12,13,,,,,63,66,77,',
'64,57,,59,44,,,,71,67,,69,70,,,,53,54,56,55,15,,,58,,,43,,50,,52,115',
',51,76,72,,45,75,,,,,73,14,,,74,,,12,13,,,,,63,66,77,,64,57,,59,44,',
',,71,67,,69,70,,,,53,54,56,55,15,,,58,,,43,,50,,52,115,,51,76,72,,45',
'75,,,,,73,14,,,74,,,12,13,,,,,63,66,77,,64,57,,59,44,,,,71,67,,69,70',
',,,53,54,56,55,15,,,58,,,43,,50,,52,115,,51,76,72,,45,75,,,,,73,14,',
',74,,,12,13,,,,,63,66,77,,64,57,,59,44,,,,71,67,,69,70,,,,53,54,56,55',
'15,,,58,,,43,,50,,52,115,,51,76,72,,45,75,,,,,73,14,,,74,,,12,13,,,',
',63,66,77,,64,57,,59,44,,,,71,67,,69,70,,,,53,54,56,55,15,,,58,,,43',
',50,,52,115,,51,76,72,,45,75,,,,,73,14,,,74,,,12,13,,,,,63,66,77,,64',
'57,,59,44,,,,71,67,,69,70,,,,53,54,56,55,15,,,58,,,43,,50,,52,115,,51',
'76,72,,45,75,,,,,73,14,,,74,,,12,13,,,,,63,66,77,,64,57,,59,44,,,,71',
'67,,69,70,,,,53,54,56,55,15,,,58,,,43,,50,,52,115,,51,76,72,,45,75,',
',,,73,14,,,74,,,12,13,,,,,63,66,77,,64,57,,59,44,,,,71,67,,69,70,,,',
'53,54,56,55,15,,,58,,,43,,50,,52,115,,51,76,72,,45,75,,,,,73,14,,,74',
',,12,13,,,,,63,66,77,,64,57,,59,44,,,,71,67,,69,70,,,,53,54,56,55,15',
',,58,,,43,,50,,52,115,,51,76,72,,45,75,,,,,73,14,,,74,,,12,13,,,,,63',
'66,77,,64,57,,59,44,,,,71,67,,69,70,,,,53,54,56,55,15,,,58,,,43,,50',
',52,115,,51,76,72,,45,75,,,,,73,14,,,74,,,12,13,,,,,63,66,77,,64,57',
',59,44,,,,71,67,,69,70,,,,53,54,56,55,15,,,58,,,43,,50,,52,115,,51,76',
'72,,45,75,,,,,73,14,,,74,,,12,13,,,,,63,66,77,,64,57,,59,44,,,,71,67',
',69,70,,,,53,54,56,55,15,,,58,,,43,,50,,52,115,,51,76,72,,45,75,,,,',
'73,14,,,74,,,12,13,,,,,63,66,77,,64,57,,59,44,,,,71,67,,69,70,,,,53',
'54,56,55,15,,,58,,,43,,50,,52,115,,51,76,72,,45,75,,,,,73,14,,,74,,',
'12,13,,,,,63,66,77,,64,57,,59,44,,,,71,67,,69,70,,,,53,54,56,55,15,',
',58,,,43,,50,,52,115,,51,76,72,,45,75,,,,,73,14,,,74,,,12,13,,,,,63',
'66,77,,64,57,,59,44,,,,71,67,,69,70,,,,53,54,56,55,15,,,58,,,43,,50',
',52,115,,51,76,72,,45,75,,,,,73,14,,,74,,,12,13,,,,,63,66,77,,64,57',
',59,44,,,,71,67,,69,70,,,,53,54,56,55,15,,,58,,,43,,50,,52,115,,51,76',
'72,,45,75,,,,,73,14,,,74,,,12,13,,,,,63,66,77,,64,57,,59,44,,,,71,67',
',69,70,,,,53,54,56,55,15,,,58,,,43,,50,,52,115,,51,76,72,,45,75,,,,',
'73,14,,,74,,,12,13,,,,,63,66,77,,64,57,,59,44,,,,71,67,,69,70,,,,53',
'54,56,55,15,,,58,,,43,,50,,52,115,,51,76,72,,45,75,,,,,73,14,,,74,,',
'12,13,,,,,63,66,77,,64,57,,59,44,,,,71,67,,69,70,,,,53,54,56,55,15,',
',58,,,43,,50,,52,115,,51,76,72,,45,75,,,,,73,14,,,74,,,12,13,,,,,63',
'66,77,,64,57,,59,44,,,,71,67,,69,70,,,,53,54,56,55,15,,,58,,,43,,50',
',52,115,,51,76,72,,45,75,,,,,73,14,,,74,,,12,13,,,,,63,66,77,,64,57',
',59,44,,,,71,67,,69,70,,,,53,54,56,55,15,,,58,,,43,,50,,52,115,,51,76',
'72,,45,75,,,,,73,14,,,74,,,12,13,,,,,63,66,77,,64,57,,59,44,,,,71,67',
',69,70,,,,53,54,56,55,15,,,58,,,43,,50,,52,115,,51,76,72,,45,75,,,,',
'73,14,,,74,,,12,13,,,,,63,66,77,,64,57,,59,44,,,,71,67,,69,70,,,,53',
'54,56,55,15,,,58,,,43,,50,,52,115,,51,76,72,,45,75,,,,,73,14,,,74,,',
'12,13,,,294,216,293,217,77,291,219,295,289,288,44,290,292,196,71,67',
',69,70,220,215,296,53,54,56,55,63,66,,58,64,57,,59,379,,,218,297,,,',
',,,,,,,,15,,,,,,43,,50,,52,47,,51,76,72,,45,75,48,49,,,73,14,,,74,,',
'12,13,,,,,63,66,77,,64,57,,59,44,,,,71,67,,69,70,,,,53,54,56,55,15,',
',58,,,199,216,210,217,52,211,219,212,208,206,,201,214,,,,,73,14,220',
'215,213,,,12,13,,,,,,,77,,,,,218,200,,,,71,67,,69,70,,,,53,54,56,55',
'63,66,,58,64,57,,59,294,216,293,217,,291,219,295,289,288,,290,292,,',
',15,,,220,215,296,43,,50,,52,47,,51,76,72,,45,75,48,49,218,297,73,14',
',,74,,,12,13,,,,,63,66,77,,64,57,,59,44,,,,71,67,,69,70,,,,53,54,56',
'55,15,,,58,,,43,,50,,52,115,,51,76,72,,45,75,,,,,73,14,,,74,,,12,13',
',,,,63,66,77,,64,57,,59,44,,,,71,67,,69,70,,,,53,54,56,55,15,,,58,,',
'43,,50,,52,115,,51,76,72,,45,75,,,,,73,14,,,74,,,12,13,,,,,63,66,77',
',64,57,,59,44,,,,71,67,,69,70,,,,53,54,56,55,15,,,58,,,43,,50,,52,115',
',51,76,72,,45,75,,,,,73,14,,,74,,,12,13,,,,,,,77,,,,,,44,,,,71,67,,69',
'70,,,,53,54,56,55,63,66,,58,64,57,,59,312,86,,,,,,,,,,,,,,109,15,113',
',108,,,43,,50,,52,47,,51,76,72,,45,75,48,49,,,73,14,112,,74,,,12,13',
',90,91,93,92,,77,,88,89,,,44,,,87,71,67,,69,70,,,,53,54,56,55,63,66',
',58,64,57,,59,310,94,,,,,,,,,,,,,,,15,,,,,,43,,50,,52,47,,51,76,72,',
'45,75,48,49,,,73,14,,,74,,,12,13,,,,,63,66,77,,64,57,331,59,44,,,,71',
'67,,69,70,,,,53,54,56,55,15,,,58,,,43,,50,,52,115,,51,76,72,,45,75,',
',,,73,14,,,74,,,12,13,,,,,63,66,77,,64,57,,59,44,,,,71,67,,69,70,,,',
'53,54,56,55,15,,,58,,,43,,50,,52,115,,51,76,72,,45,75,,,,,73,14,,,74',
',,12,13,,,,,63,66,77,,64,57,,59,44,,,,71,67,,69,70,,,,53,54,56,55,15',
'228,,58,,,43,,50,,52,115,,51,76,72,,45,75,,,,,73,14,,,74,,,12,13,,,',
',,,77,,,,,,44,,,,71,67,,69,70,,,,53,54,56,55,63,66,,58,64,57,,59,364',
'86,,,,,,,,,,,,,,109,15,113,,108,,,43,,50,,52,115,,51,76,72,,45,75,,',
',,73,14,112,,74,,,12,13,,90,91,93,92,,77,,88,89,,,44,,,87,71,67,,69',
'70,,,,53,54,56,55,63,66,,58,64,57,,59,304,94,,,,,,,,,,,,,,,15,,,,,,43',
',50,,52,47,,51,76,72,,45,75,48,49,,,73,14,,,74,,,12,13,,,,,63,66,77',
',64,57,,59,44,,,,71,67,,69,70,,,,53,54,56,55,15,236,,58,,,43,,50,,52',
'115,,51,76,72,,45,75,,,,,73,14,,,74,,,12,13,,,,,63,66,77,,64,57,,59',
'44,,,,71,67,,69,70,,,,53,54,56,55,15,,,58,,,43,,50,,52,47,,51,76,72',
',45,75,48,49,,,73,14,,,74,,,12,13,,,,,63,66,77,,64,57,,59,44,,,,71,67',
',69,70,,,,53,54,56,55,15,,,58,,,43,,50,,52,115,,51,76,72,,45,75,,,,',
'73,14,,,74,,,12,13,,,,,63,66,77,,64,57,,59,44,,,,71,67,,69,70,,,,53',
'54,56,55,15,,,58,,,43,,50,,52,115,,51,76,72,,45,75,,,,,73,14,,,74,,',
'12,13,,,,,63,66,77,,64,57,,59,44,,,,71,67,,69,70,,,,53,54,56,55,15,',
',58,,,43,,50,,52,115,,51,76,72,,45,75,,,,,73,14,,,74,,,12,13,,,,,63',
'66,77,,64,57,332,59,44,,,,71,67,,69,70,,,,53,54,56,55,15,,,58,,,43,',
'50,,52,115,,51,76,72,,45,75,,,,,73,14,,,74,,,12,13,,,,,63,66,77,,64',
'57,,59,44,,,,71,67,,69,70,,,,53,54,56,55,15,,,58,,,43,,50,,52,115,,51',
'76,72,,45,75,,,,,73,14,,,74,,,12,13,,,,,63,66,77,,64,57,,59,44,,,,71',
'67,,69,70,,,,53,54,56,55,15,,,58,,,43,,50,,52,115,,51,76,72,,45,75,',
',,,73,14,,,74,,,12,13,,,,,63,66,77,,64,57,,59,44,,,,71,67,,69,70,,,',
'53,54,56,55,15,,,58,,,43,,50,,52,115,,51,76,72,,45,75,,,,,73,14,,,74',
',,12,13,,,,,,,77,,,,,,44,,,,71,67,,69,70,,,,53,54,56,55,63,66,,58,64',
'57,,59,334,,,,,,,,,,,,,,,,15,,,,,,43,,50,,52,115,,51,76,72,,45,75,,',
',,73,14,,,74,,,12,13,,,,,63,66,77,,64,57,,59,44,,,,71,67,,69,70,,,,53',
'54,56,55,15,,,58,,,43,,50,,52,115,,51,76,72,,45,75,,,,,73,14,,,74,,',
'12,13,,,,,,,77,,,,,,44,,,,71,67,,69,70,,,86,53,54,56,55,,,,58,105,106',
'107,102,97,109,,113,,108,,,98,100,99,101,,,,,,,,,,,,,,,,112,,,,104,103',
',,90,91,93,92,95,96,,88,89,86,,240,,,87,,,,105,106,107,102,97,109,,113',
',108,,,98,100,99,101,,,94,,,,,,,,,,,,,112,,,,104,103,,,90,91,93,92,95',
'96,86,88,89,,,,,,87,105,106,107,102,97,109,,113,,108,,,98,100,99,101',
',,,,,94,,,,,,,,,,112,,,,104,103,,,90,91,93,92,95,96,86,88,89,,,256,',
',87,105,106,107,102,97,109,,113,,108,,,98,100,99,101,,,,,,94,,,,,,,',
',,112,,,,104,103,,,90,91,93,92,95,96,,88,89,86,,239,,,87,,,,105,106',
'107,102,97,109,,113,,108,,,98,100,99,101,,,94,,,,,,,,,,,,,112,,,,104',
'103,,,90,91,93,92,95,96,86,88,89,,,,,,87,105,106,107,102,97,109,,113',
',108,,,98,100,99,101,,,,,,94,,,,,,,,,,112,,,,104,103,,,90,91,93,92,95',
'96,,88,89,86,,238,,,87,,,,105,106,107,102,97,109,,113,,108,,,98,100',
'99,101,,,94,,,,,,,,,,,,,112,,,,104,103,,,90,91,93,92,95,96,,88,89,,86',
',110,,87,256,,,,105,106,107,102,97,109,,113,,108,,,98,100,99,101,,94',
',,,,,,,,,,,,,112,,,,104,103,,,90,91,93,92,95,96,,88,89,86,,237,,,87',
',,,105,106,107,102,97,109,,113,,108,,,98,100,99,101,,,94,,,,,,,,,,,',
',112,,,,104,103,,,90,91,93,92,95,96,86,88,89,,,,,,87,105,106,107,102',
'97,109,,113,,108,,226,98,100,99,101,,,,,,94,,,,,,,,,,112,,,,104,103',
',,90,91,93,92,95,96,86,88,89,,,,,,87,105,106,107,102,97,109,,113,,108',
',,98,100,99,101,,,,,,94,,,,,,,,,,112,,,,104,103,,,90,91,93,92,95,96',
'86,88,89,,,,,,87,105,106,107,102,97,109,,113,,108,270,271,98,100,99',
'101,,,,,,94,,,,,,,,,,112,,,,104,103,,,90,91,93,92,95,96,86,88,89,,,',
',,87,105,106,107,102,97,109,,113,,108,,,98,100,99,101,,,,,,94,,,,,,',
',,,112,,,,104,103,,,90,91,93,92,95,96,86,88,89,,,,,,87,105,106,107,102',
'97,109,,113,,108,,,98,100,99,101,,,,,,94,,,,,,,,,,112,,,,104,103,,,90',
'91,93,92,95,96,86,88,89,,,,,,87,105,106,107,102,97,109,,113,,108,,,98',
'100,99,101,,,,,,94,,,,,,,,,,112,,,,104,103,,,90,91,93,92,95,96,86,88',
'89,,,,,,87,105,106,107,102,97,109,,113,,108,,,98,100,99,101,,,,,,94',
',,,,,,,,,112,,,,104,103,,,90,91,93,92,95,96,86,88,89,,,,,,87,105,106',
'107,102,97,109,,113,,108,,,98,100,99,101,,,,,,94,,,,,,,,,,112,,,,104',
'103,,,90,91,93,92,95,96,86,88,89,,,,,,87,105,106,107,102,97,109,280',
'113,,108,,,98,100,99,101,,,,,,94,,,,,,,,,,112,,,,104,103,,,90,91,93',
'92,95,96,,88,89,86,,110,,,87,,,,105,106,107,102,97,109,,113,,108,,,98',
'100,99,101,,,94,,,,,,,,,,,,,112,,,,104,103,,,90,91,93,92,95,96,86,88',
'89,,,276,,,87,105,106,107,102,97,109,,113,86,108,,,98,100,99,101,,,',
',,94,109,,113,,108,,,,,112,,,,104,103,,,90,91,93,92,95,96,,88,89,112',
',,86,,87,,,90,91,93,92,95,96,,88,89,109,,113,86,108,87,,,,,94,,,,,,97',
'109,,113,,108,,,98,,112,94,,,,,,,90,91,93,92,95,96,,88,89,112,,,,,87',
',86,90,91,93,92,95,96,,88,89,,,,97,109,87,113,86,108,,94,98,,,,,,,,',
'97,109,,113,,108,,94,98,,112,63,66,,,64,,,90,91,93,92,95,96,,88,89,112',
',,,,87,,,90,91,93,92,95,96,,88,89,,,86,,,87,144,,,141,94,105,106,107',
'102,97,109,,113,,108,,,98,100,99,101,94,,77,,,,,,,,,,145,67,,112,,,',
'104,103,,86,90,91,93,92,95,96,,88,89,,,102,97,109,87,113,,108,,86,98',
'100,99,101,,,,,,,,102,97,109,,113,94,108,,112,98,100,99,101,,,,90,91',
'93,92,95,96,,88,89,,,,112,,87,,,103,,,90,91,93,92,95,96,,88,89,86,,',
',,87,,94,,105,106,107,102,97,109,,113,,108,,,98,100,99,101,,,94,,,,',
',,,,,,,,112,,,,104,103,,,90,91,93,92,95,96,86,88,89,,,,,,87,105,106',
'107,102,97,109,,113,,108,,86,98,100,99,101,63,66,,,64,94,,,97,109,,113',
',108,,112,98,,,104,103,,,90,91,93,92,95,96,,88,89,63,66,,112,64,87,',
'144,,,141,90,91,93,92,95,96,,88,89,86,,63,66,,87,64,94,,,77,,,,109,',
'113,86,108,144,145,67,141,,,,,94,,86,,109,,113,,108,,,,,112,144,77,109',
'141,113,,108,,,,,145,67,,88,89,112,,,,,87,,77,,,,,112,,,88,89,145,67',
',,,87,,,,,88,89,,,,,,87' ]
        racc_action_table = arr = ::Array.new(6903, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

clist = [
'0,0,235,208,0,0,137,0,209,175,214,206,245,251,213,149,235,157,157,313',
'149,245,161,175,0,175,122,175,313,322,0,137,0,322,0,0,322,0,0,0,319',
'0,0,0,0,208,251,0,0,175,209,0,214,206,0,0,213,161,47,175,175,122,0,211',
'175,175,129,211,0,171,273,175,0,0,171,0,0,0,338,338,0,0,0,0,392,392',
'47,0,392,392,47,392,392,175,129,147,267,117,129,210,147,159,159,210',
'152,159,50,152,392,203,50,117,277,117,392,117,392,202,392,392,115,392',
'392,392,115,392,392,392,392,281,165,392,392,283,310,392,310,117,392',
'392,8,8,8,8,5,5,392,223,5,5,225,5,392,355,227,355,392,392,287,392,392',
'139,301,303,392,392,392,392,5,305,306,392,136,309,5,228,5,311,5,5,312',
'5,5,5,5,5,5,5,5,131,121,5,5,316,317,5,318,246,5,5,320,232,279,279,279',
'279,5,279,279,279,279,279,5,279,279,324,5,5,111,5,5,279,279,279,5,5',
'5,5,391,391,109,5,391,391,80,391,391,176,78,279,279,337,234,68,340,67',
'342,242,48,349,350,176,391,176,42,176,243,41,391,358,391,359,391,391',
'361,391,391,391,362,391,391,391,391,366,367,391,391,176,368,391,40,374',
'391,391,375,378,247,176,176,6,391,1,176,176,396,400,391,402,404,176',
'391,391,,391,391,,,,391,391,391,391,389,389,,391,389,389,,389,389,176',
',,,172,,,,,,,,,,,389,,,172,,172,389,172,389,,389,389,,389,389,389,,389',
'389,389,389,,,389,389,,,389,,172,389,389,,,,,196,196,389,,196,196,,196',
'389,,,,389,389,,389,389,,,,389,389,389,389,196,,,389,,,196,,196,,196',
'196,,196,196,196,,196,196,,,,,196,196,,,196,,,196,196,,,,,12,12,196',
',12,12,,12,196,,,,196,196,,196,196,,,,196,196,196,196,12,,,196,,,12',
',12,,12,12,,12,12,12,,12,12,,,,,12,12,,,12,,,12,12,,,,,13,13,12,,13',
'13,,13,12,,,,12,12,,12,12,,,,12,12,12,12,13,,,12,,,13,,13,,13,13,,13',
'13,13,,13,13,,,,,13,13,,,13,,,13,13,,,,,14,14,13,,14,14,,14,13,,,,13',
'13,,13,13,,,,13,13,13,13,14,,,13,,,14,,14,,14,14,,14,14,14,,14,14,,',
',,14,14,,,14,,,14,14,,,,,15,15,14,,15,15,,15,14,,,,14,14,,14,14,,,,14',
'14,14,14,15,,,14,,,15,,15,,15,15,,15,15,15,,15,15,,,,,15,15,,,15,,,15',
'15,,,,,370,370,15,,370,370,,370,15,,,,15,15,,15,15,,,,15,15,15,15,370',
',,15,,,370,,370,,370,370,,370,370,370,,370,370,370,370,,,370,370,,,370',
',,370,370,,,,,357,357,370,,357,357,,357,370,,,,370,370,,370,370,,,,370',
'370,370,370,357,,,370,,,357,,357,,357,357,,357,357,357,,357,357,,,,',
'357,357,,,357,,,357,357,,,,,199,199,357,,199,199,,199,357,,,,357,357',
',357,357,,,,357,357,357,357,199,,,357,,,199,,199,,199,199,,199,199,199',
',199,199,,,,,199,199,,,199,,,199,199,,,,,43,43,199,,43,43,,43,199,,',
',199,199,,199,199,,,,199,199,199,199,43,,,199,,,43,,43,,43,43,,43,43',
'43,,43,43,,,,,43,43,,,43,,,43,43,,,,,44,44,43,,44,44,,44,43,,,,43,43',
',43,43,,,,43,43,43,43,44,,,43,,,44,,44,,44,44,,44,44,44,,44,44,,,,,44',
'44,,,44,,,44,44,,,,,45,45,44,,45,45,,45,44,,,,44,44,,44,44,,,,44,44',
'44,44,45,,,44,,,45,,45,,45,45,,45,45,45,,45,45,,,,,45,45,,,45,,,45,45',
',,,,46,46,45,,46,46,,46,45,,,,45,45,,45,45,,,,45,45,45,45,46,,,45,,',
'46,,46,,46,46,,46,46,46,,46,46,,,,,46,46,,,46,,,46,46,,,,,241,241,46',
',241,241,,241,46,,,,46,46,,46,46,,,,46,46,46,46,241,,,46,,,241,,241',
',241,241,,241,241,241,,241,241,,,,,241,241,,,241,,,241,241,,,,,200,200',
'241,,200,200,,200,241,,,,241,241,,241,241,,,,241,241,241,241,200,,,241',
',,200,,200,,200,200,,200,200,200,,200,200,,,,,200,200,,,200,,,200,200',
',,,,201,201,200,,201,201,,201,200,,,,200,200,,200,200,,,,200,200,200',
'200,201,,,200,,,201,,201,,201,201,,201,201,201,,201,201,,,,,201,201',
',,201,,,201,201,,,,,240,240,201,,240,240,,240,201,,,,201,201,,201,201',
',,,201,201,201,201,240,,,201,,,240,240,240,240,240,240,240,240,240,240',
',240,240,,,,,240,240,240,240,240,,,240,240,,,,,,,240,,,,,240,240,,,',
'240,240,,240,240,,,,240,240,240,240,57,57,,240,57,57,57,57,,174,,,,',
',,,,,,,,,174,57,174,,174,,,57,,57,,57,57,,57,57,57,,57,57,,,,,57,57',
'174,,57,,,57,57,,,,,58,58,57,,58,58,58,58,57,,,174,57,57,,57,57,,,,57',
'57,57,57,58,,,57,,,58,,58,,58,58,,58,58,58,,58,58,,,,,58,58,,,58,,173',
'58,58,,,,,,,58,,,,,173,58,173,,173,58,58,,58,58,,,,58,58,58,58,59,59',
',58,59,59,,59,59,173,,,,,,,,,,,,,,,59,,,,,,59,173,59,,59,59,,59,59,59',
',59,59,,,,,59,59,,,59,,,59,59,,,,,65,65,59,,65,65,,65,59,,,,59,59,,59',
'59,,,,59,59,59,59,65,,,59,,,65,,65,,65,65,,65,65,65,,65,65,,,,,65,65',
',,65,,,65,65,,,,,341,341,65,,341,341,,341,65,,,,65,65,,65,65,,,,65,65',
'65,65,341,,,65,,,341,,341,,341,341,,341,341,341,,341,341,,,,,341,341',
',,341,,,341,341,,,,,276,276,341,,276,276,,276,341,,,,341,341,,341,341',
',,,341,341,341,341,276,,,341,,,276,,276,,276,276,,276,276,276,,276,276',
',,,,276,276,,,276,,,276,276,,,,,70,70,276,,70,70,,70,276,,,,276,276',
',276,276,,,,276,276,276,276,70,,,276,,,70,,70,,70,70,,70,70,70,,70,70',
',,,,70,70,,,70,,,70,70,,,,,282,282,70,,282,282,,282,70,,,,70,70,,70',
'70,,,,70,70,70,70,282,,,70,,,282,,282,,282,282,,282,282,282,,282,282',
',,,,282,282,,,282,,,282,282,,,,,79,79,282,,79,79,,79,282,,,,282,282',
',282,282,,,,282,282,282,282,79,,,282,,,79,,79,,79,79,,79,79,79,,79,79',
'79,79,,,79,79,,,79,,116,79,79,,,,,,,79,,,,,116,79,116,,116,79,79,,79',
'79,,,,79,79,79,79,163,163,,79,163,163,,163,163,116,,,,114,,,,,,,,,,',
'163,,,114,,114,163,114,163,,163,163,,163,163,163,,163,163,163,163,,',
'163,163,,,163,,114,163,163,,,,,81,81,163,,81,81,,81,163,,,,163,163,',
'163,163,,,,163,163,163,163,81,,,163,,,81,,81,,81,81,,81,81,81,,81,81',
'81,81,,,81,81,,,81,,,81,81,,,,,82,82,81,,82,82,,82,81,,,,81,81,,81,81',
',,,81,81,81,81,82,,,81,,,82,,82,,82,82,,82,82,82,,82,82,82,82,,,82,82',
',,82,,,82,82,,,,,83,83,82,,83,83,,83,82,,,,82,82,,82,82,,,,82,82,82',
'82,83,,,82,,,83,,83,,83,83,,83,83,83,,83,83,83,83,,,83,83,,,83,,,83',
'83,,,,,84,84,83,,84,84,,84,83,,,,83,83,,83,83,,,,83,83,83,83,84,,,83',
',,84,,84,,84,84,,84,84,84,,84,84,84,84,,,84,84,,,84,,,84,84,,,,,85,85',
'84,,85,85,,85,84,,,,84,84,,84,84,,,,84,84,84,84,85,,,84,,,85,,85,,85',
'85,,85,85,85,,85,85,85,85,,,85,85,,,85,,,85,85,,,,,86,86,85,,86,86,',
'86,85,,,,85,85,,85,85,,,,85,85,85,85,86,,,85,,,86,,86,,86,86,,86,86',
'86,,86,86,,,,,86,86,,,86,,,86,86,,,,,87,87,86,,87,87,,87,86,,,,86,86',
',86,86,,,,86,86,86,86,87,,,86,,,87,,87,,87,87,,87,87,87,,87,87,,,,,87',
'87,,,87,,,87,87,,,,,88,88,87,,88,88,,88,87,,,,87,87,,87,87,,,,87,87',
'87,87,88,,,87,,,88,,88,,88,88,,88,88,88,,88,88,,,,,88,88,,,88,,,88,88',
',,,,89,89,88,,89,89,,89,88,,,,88,88,,88,88,,,,88,88,88,88,89,,,88,,',
'89,,89,,89,89,,89,89,89,,89,89,,,,,89,89,,,89,,,89,89,,,,,90,90,89,',
'90,90,,90,89,,,,89,89,,89,89,,,,89,89,89,89,90,,,89,,,90,,90,,90,90',
',90,90,90,,90,90,,,,,90,90,,,90,,,90,90,,,,,91,91,90,,91,91,,91,90,',
',,90,90,,90,90,,,,90,90,90,90,91,,,90,,,91,,91,,91,91,,91,91,91,,91',
'91,,,,,91,91,,,91,,,91,91,,,,,92,92,91,,92,92,,92,91,,,,91,91,,91,91',
',,,91,91,91,91,92,,,91,,,92,,92,,92,92,,92,92,92,,92,92,,,,,92,92,,',
'92,,,92,92,,,,,93,93,92,,93,93,,93,92,,,,92,92,,92,92,,,,92,92,92,92',
'93,,,92,,,93,,93,,93,93,,93,93,93,,93,93,,,,,93,93,,,93,,,93,93,,,,',
'94,94,93,,94,94,,94,93,,,,93,93,,93,93,,,,93,93,93,93,94,,,93,,,94,',
'94,,94,94,,94,94,94,,94,94,,,,,94,94,,,94,,,94,94,,,,,95,95,94,,95,95',
',95,94,,,,94,94,,94,94,,,,94,94,94,94,95,,,94,,,95,,95,,95,95,,95,95',
'95,,95,95,,,,,95,95,,,95,,,95,95,,,,,96,96,95,,96,96,,96,95,,,,95,95',
',95,95,,,,95,95,95,95,96,,,95,,,96,,96,,96,96,,96,96,96,,96,96,,,,,96',
'96,,,96,,,96,96,,,,,97,97,96,,97,97,,97,96,,,,96,96,,96,96,,,,96,96',
'96,96,97,,,96,,,97,,97,,97,97,,97,97,97,,97,97,,,,,97,97,,,97,,,97,97',
',,,,98,98,97,,98,98,,98,97,,,,97,97,,97,97,,,,97,97,97,97,98,,,97,,',
'98,,98,,98,98,,98,98,98,,98,98,,,,,98,98,,,98,,,98,98,,,,,99,99,98,',
'99,99,,99,98,,,,98,98,,98,98,,,,98,98,98,98,99,,,98,,,99,,99,,99,99',
',99,99,99,,99,99,,,,,99,99,,,99,,,99,99,,,,,100,100,99,,100,100,,100',
'99,,,,99,99,,99,99,,,,99,99,99,99,100,,,99,,,100,,100,,100,100,,100',
'100,100,,100,100,,,,,100,100,,,100,,,100,100,,,,,101,101,100,,101,101',
',101,100,,,,100,100,,100,100,,,,100,100,100,100,101,,,100,,,101,,101',
',101,101,,101,101,101,,101,101,,,,,101,101,,,101,,,101,101,,,,,102,102',
'101,,102,102,,102,101,,,,101,101,,101,101,,,,101,101,101,101,102,,,101',
',,102,,102,,102,102,,102,102,102,,102,102,,,,,102,102,,,102,,,102,102',
',,,,103,103,102,,103,103,,103,102,,,,102,102,,102,102,,,,102,102,102',
'102,103,,,102,,,103,,103,,103,103,,103,103,103,,103,103,,,,,103,103',
',,103,,,103,103,,,,,104,104,103,,104,104,,104,103,,,,103,103,,103,103',
',,,103,103,103,103,104,,,103,,,104,,104,,104,104,,104,104,104,,104,104',
',,,,104,104,,,104,,,104,104,,,,,105,105,104,,105,105,,105,104,,,,104',
'104,,104,104,,,,104,104,104,104,105,,,104,,,105,,105,,105,105,,105,105',
'105,,105,105,,,,,105,105,,,105,,,105,105,,,,,106,106,105,,106,106,,106',
'105,,,,105,105,,105,105,,,,105,105,105,105,106,,,105,,,106,,106,,106',
'106,,106,106,106,,106,106,,,,,106,106,,,106,,,106,106,,,,,107,107,106',
',107,107,,107,106,,,,106,106,,106,106,,,,106,106,106,106,107,,,106,',
',107,,107,,107,107,,107,107,107,,107,107,,,,,107,107,,,107,,,107,107',
',,,,108,108,107,,108,108,,108,107,,,,107,107,,107,107,,,,107,107,107',
'107,108,,,107,,,108,,108,,108,108,,108,108,108,,108,108,,,,,108,108',
',,108,,,108,108,,,284,284,284,284,108,284,284,284,284,284,108,284,284',
'108,108,108,,108,108,284,284,284,108,108,108,108,326,326,,108,326,326',
',326,326,,,284,284,,,,,,,,,,,,326,,,,,,326,,326,,326,326,,326,326,326',
',326,326,326,326,,,326,326,,,326,,,326,326,,,,,110,110,326,,110,110',
',110,326,,,,326,326,,326,326,,,,326,326,326,326,110,,,326,,,110,110',
'110,110,110,110,110,110,110,110,,110,110,,,,,110,110,110,110,110,,,110',
'110,,,,,,,110,,,,,110,110,,,,110,110,,110,110,,,,110,110,110,110,325',
'325,,110,325,325,,325,221,221,221,221,,221,221,221,221,221,,221,221',
',,,325,,,221,221,221,325,,325,,325,325,,325,325,325,,325,325,325,325',
'221,221,325,325,,,325,,,325,325,,,,,112,112,325,,112,112,,112,325,,',
',325,325,,325,325,,,,325,325,325,325,112,,,325,,,112,,112,,112,112,',
'112,112,112,,112,112,,,,,112,112,,,112,,,112,112,,,,,113,113,112,,113',
'113,,113,112,,,,112,112,,112,112,,,,112,112,112,112,113,,,112,,,113',
',113,,113,113,,113,113,113,,113,113,,,,,113,113,,,113,,,113,113,,,,',
'239,239,113,,239,239,,239,113,,,,113,113,,113,113,,,,113,113,113,113',
'239,,,113,,,239,,239,,239,239,,239,239,239,,239,239,,,,,239,239,,,239',
',,239,239,,,,,,,239,,,,,,239,,,,239,239,,239,239,,,,239,239,239,239',
'238,238,,239,238,238,,238,238,180,,,,,,,,,,,,,,180,238,180,,180,,,238',
',238,,238,238,,238,238,238,,238,238,238,238,,,238,238,180,,238,,,238',
'238,,180,180,180,180,,238,,180,180,,,238,,,180,238,238,,238,238,,,,238',
'238,238,238,237,237,,238,237,237,,237,237,180,,,,,,,,,,,,,,,237,,,,',
',237,,237,,237,237,,237,237,237,,237,237,237,237,,,237,237,,,237,,,237',
'237,,,,,252,252,237,,252,252,252,252,237,,,,237,237,,237,237,,,,237',
'237,237,237,252,,,237,,,252,,252,,252,252,,252,252,252,,252,252,,,,',
'252,252,,,252,,,252,252,,,,,275,275,252,,275,275,,275,252,,,,252,252',
',252,252,,,,252,252,252,252,275,,,252,,,275,,275,,275,275,,275,275,275',
',275,275,,,,,275,275,,,275,,,275,275,,,,,119,119,275,,119,119,,119,275',
',,,275,275,,275,275,,,,275,275,275,275,119,119,,275,,,119,,119,,119',
'119,,119,119,119,,119,119,,,,,119,119,,,119,,,119,119,,,,,,,119,,,,',
',119,,,,119,119,,119,119,,,,119,119,119,119,314,314,,119,314,314,,314',
'314,181,,,,,,,,,,,,,,181,314,181,,181,,,314,,314,,314,314,,314,314,314',
',314,314,,,,,314,314,181,,314,,,314,314,,181,181,181,181,,314,,181,181',
',,314,,,181,314,314,,314,314,,,,314,314,314,314,230,230,,314,230,230',
',230,230,181,,,,,,,,,,,,,,,230,,,,,,230,,230,,230,230,,230,230,230,',
'230,230,230,230,,,230,230,,,230,,,230,230,,,,,123,123,230,,123,123,',
'123,230,,,,230,230,,230,230,,,,230,230,230,230,123,123,,230,,,123,,123',
',123,123,,123,123,123,,123,123,,,,,123,123,,,123,,,123,123,,,,,160,160',
'123,,160,160,,160,123,,,,123,123,,123,123,,,,123,123,123,123,160,,,123',
',,160,,160,,160,160,,160,160,160,,160,160,160,160,,,160,160,,,160,,',
'160,160,,,,,285,285,160,,285,285,,285,160,,,,160,160,,160,160,,,,160',
'160,160,160,285,,,160,,,285,,285,,285,285,,285,285,285,,285,285,,,,',
'285,285,,,285,,,285,285,,,,,300,300,285,,300,300,,300,285,,,,285,285',
',285,285,,,,285,285,285,285,300,,,285,,,300,,300,,300,300,,300,300,300',
',300,300,,,,,300,300,,,300,,,300,300,,,,,263,263,300,,263,263,,263,300',
',,,300,300,,300,300,,,,300,300,300,300,263,,,300,,,263,,263,,263,263',
',263,263,263,,263,263,,,,,263,263,,,263,,,263,263,,,,,254,254,263,,254',
'254,254,254,263,,,,263,263,,263,263,,,,263,263,263,263,254,,,263,,,254',
',254,,254,254,,254,254,254,,254,254,,,,,254,254,,,254,,,254,254,,,,',
'130,130,254,,130,130,,130,254,,,,254,254,,254,254,,,,254,254,254,254',
'130,,,254,,,130,,130,,130,130,,130,130,130,,130,130,,,,,130,130,,,130',
',,130,130,,,,,256,256,130,,256,256,,256,130,,,,130,130,,130,130,,,,130',
'130,130,130,256,,,130,,,256,,256,,256,256,,256,256,256,,256,256,,,,',
'256,256,,,256,,,256,256,,,,,307,307,256,,307,307,,307,256,,,,256,256',
',256,256,,,,256,256,256,256,307,,,256,,,307,,307,,307,307,,307,307,307',
',307,307,,,,,307,307,,,307,,,307,307,,,,,,,307,,,,,,307,,,,307,307,',
'307,307,,,,307,307,307,307,258,258,,307,258,258,,258,258,,,,,,,,,,,',
',,,,258,,,,,,258,,258,,258,258,,258,258,258,,258,258,,,,,258,258,,,258',
',,258,258,,,,,286,286,258,,286,286,,286,258,,,,258,258,,258,258,,,,258',
'258,258,258,286,,,258,,,286,,286,,286,286,,286,286,286,,286,286,,,,',
'286,286,,,286,,,286,286,,,,,,,286,,,,,,286,,,,286,286,,286,286,,,146',
'286,286,286,286,,,,286,146,146,146,146,146,146,,146,,146,,,146,146,146',
'146,,,,,,,,,,,,,,,,146,,,,146,146,,,146,146,146,146,146,146,,146,146',
'128,,128,,,146,,,,128,128,128,128,128,128,,128,,128,,,128,128,128,128',
',,146,,,,,,,,,,,,,128,,,,128,128,,,128,128,128,128,128,128,222,128,128',
',,,,,128,222,222,222,222,222,222,,222,,222,,,222,222,222,222,,,,,,128',
',,,,,,,,,222,,,,222,222,,,222,222,222,222,222,222,151,222,222,,,151',
',,222,151,151,151,151,151,151,,151,,151,,,151,151,151,151,,,,,,222,',
',,,,,,,,151,,,,151,151,,,151,151,151,151,151,151,,151,151,127,,127,',
',151,,,,127,127,127,127,127,127,,127,,127,,,127,127,127,127,,,151,,',
',,,,,,,,,,127,,,,127,127,,,127,127,127,127,127,127,155,127,127,,,,,',
'127,155,155,155,155,155,155,,155,,155,,,155,155,155,155,,,,,,127,,,',
',,,,,,155,,,,155,155,,,155,155,155,155,155,155,,155,155,126,,126,,,155',
',,,126,126,126,126,126,126,,126,,126,,,126,126,126,126,,,155,,,,,,,',
',,,,,126,,,,126,126,,,126,126,126,126,126,126,,126,126,,272,,272,,126',
'272,,,,272,272,272,272,272,272,,272,,272,,,272,272,272,272,,126,,,,',
',,,,,,,,,272,,,,272,272,,,272,272,272,272,272,272,,272,272,124,,124',
',,272,,,,124,124,124,124,124,124,,124,,124,,,124,124,124,124,,,272,',
',,,,,,,,,,,124,,,,124,124,,,124,124,124,124,124,124,118,124,124,,,,',
',124,118,118,118,118,118,118,,118,,118,,118,118,118,118,118,,,,,,124',
',,,,,,,,,118,,,,118,118,,,118,118,118,118,118,118,162,118,118,,,,,,118',
'162,162,162,162,162,162,,162,,162,,,162,162,162,162,,,,,,118,,,,,,,',
',,162,,,,162,162,,,162,162,162,162,162,162,330,162,162,,,,,,162,330',
'330,330,330,330,330,,330,,330,162,162,330,330,330,330,,,,,,162,,,,,',
',,,,330,,,,330,330,,,330,330,330,330,330,330,333,330,330,,,,,,330,333',
'333,333,333,333,333,,333,,333,,,333,333,333,333,,,,,,330,,,,,,,,,,333',
',,,333,333,,,333,333,333,333,333,333,339,333,333,,,,,,333,339,339,339',
'339,339,339,,339,,339,,,339,339,339,339,,,,,,333,,,,,,,,,,339,,,,339',
'339,,,339,339,339,339,339,339,347,339,339,,,,,,339,347,347,347,347,347',
'347,,347,,347,,,347,347,347,347,,,,,,339,,,,,,,,,,347,,,,347,347,,,347',
'347,347,347,347,347,348,347,347,,,,,,347,348,348,348,348,348,348,,348',
',348,,,348,348,348,348,,,,,,347,,,,,,,,,,348,,,,348,348,,,348,348,348',
'348,348,348,354,348,348,,,,,,348,354,354,354,354,354,354,,354,,354,',
',354,354,354,354,,,,,,348,,,,,,,,,,354,,,,354,354,,,354,354,354,354',
'354,354,198,354,354,,,,,,354,198,198,198,198,198,198,198,198,,198,,',
'198,198,198,198,,,,,,354,,,,,,,,,,198,,,,198,198,,,198,198,198,198,198',
'198,,198,198,11,,11,,,198,,,,11,11,11,11,11,11,,11,,11,,,11,11,11,11',
',,198,,,,,,,,,,,,,11,,,,11,11,,,11,11,11,11,11,11,193,11,11,,,193,,',
'11,193,193,193,193,193,193,,193,182,193,,,193,193,193,193,,,,,,11,182',
',182,,182,,,,,193,,,,193,193,,,193,193,193,193,193,193,,193,193,182',
',,183,,193,,,182,182,182,182,182,182,,182,182,183,,183,184,183,182,',
',,,193,,,,,,184,184,,184,,184,,,184,,183,182,,,,,,,183,183,183,183,183',
'183,,183,183,184,,,,,183,,185,184,184,184,184,184,184,,184,184,,,,185',
'185,184,185,186,185,,183,185,,,,,,,,,186,186,,186,,186,,184,186,,185',
'248,248,,,248,,,185,185,185,185,185,185,,185,185,186,,,,,185,,,186,186',
'186,186,186,186,,186,186,,,192,,,186,248,,,248,185,192,192,192,192,192',
'192,,192,,192,,,192,192,192,192,186,,248,,,,,,,,,,248,248,,192,,,,192',
'192,,188,192,192,192,192,192,192,,192,192,,,188,188,188,192,188,,188',
',189,188,188,188,188,,,,,,,,189,189,189,,189,192,189,,188,189,189,189',
'189,,,,188,188,188,188,188,188,,188,188,,,,189,,188,,,189,,,189,189',
'189,189,189,189,,189,189,190,,,,,189,,188,,190,190,190,190,190,190,',
'190,,190,,,190,190,190,190,,,189,,,,,,,,,,,,,190,,,,190,190,,,190,190',
'190,190,190,190,191,190,190,,,,,,190,191,191,191,191,191,191,,191,,191',
',187,191,191,191,191,51,51,,,51,190,,,187,187,,187,,187,,191,187,,,191',
'191,,,191,191,191,191,191,191,,191,191,250,250,,187,250,191,,51,,,51',
'187,187,187,187,187,187,,187,187,177,,212,212,,187,212,191,,,51,,,,177',
',177,178,177,250,51,51,250,,,,,187,,179,,178,,178,,178,,,,,177,212,250',
'179,212,179,,179,,,,,250,250,,177,177,178,,,,,177,,212,,,,,179,,,178',
'178,212,212,,,,178,,,,,179,179,,,,,,179' ]
        racc_action_check = arr = ::Array.new(6903, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

racc_action_pointer = [
    -2,   291,   nil,   nil,   nil,   142,   276,   nil,    75,   nil,
   nil,  6295,   430,   490,   550,   610,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   254,   186,   228,   850,   910,   970,  1030,    49,   203,   nil,
    69,  6757,   nil,   nil,   nil,   nil,   nil,  1354,  1414,  1498,
   nil,   nil,   nil,   nil,   nil,  1558,   nil,   169,   172,   nil,
  1738,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   238,  1858,
   221,  2002,  2062,  2122,  2182,  2242,  2302,  2362,  2422,  2482,
  2542,  2602,  2662,  2722,  2782,  2842,  2902,  2962,  3022,  3082,
  3142,  3202,  3262,  3322,  3382,  3442,  3502,  3562,  3622,   189,
  3766,   209,  3910,  3970,  1950,    83,  1906,    90,  5806,  4378,
   nil,   181,   -10,  4606,  5752,   nil,  5637,  5526,  5361,    57,
  4966,   163,   nil,   nil,   nil,   nil,   146,    -7,   nil,   140,
   nil,   nil,   nil,   nil,   nil,   nil,  5304,    87,   nil,     7,
   nil,  5469,    94,   nil,   nil,  5580,   nil,    13,   nil,    99,
  4666,   -14,  5860,  1942,   nil,   117,   nil,   nil,   nil,   nil,
   nil,    61,   318,  1462,  1358,     2,   230,  6804,  6821,  6833,
  4118,  4466,  6366,  6409,  6426,  6473,  6490,  6747,  6596,  6616,
  6673,  6727,  6549,  6349,   nil,   nil,   370,   nil,  6238,   790,
  1150,  1210,    75,    96,   nil,   nil,    -1,   nil,    -9,    -4,
    62,    26,  6811,     2,    -2,   nil,   nil,   nil,   nil,   nil,
   nil,  3828,  5415,    99,   nil,   126,   nil,   141,   104,   nil,
  4546,   nil,   188,   nil,   226,   -11,   nil,  4198,  4114,  4030,
  1270,  1090,   205,   218,   nil,   -15,   188,   277,  6519,   nil,
  6789,   -28,  4258,   nil,  4906,   nil,  5026,   nil,  5170,   nil,
   nil,   nil,   nil,  4846,   nil,   nil,   nil,    83,   nil,   nil,
   nil,   nil,  5695,    60,   nil,  4318,  1678,    99,   nil,   170,
   nil,   119,  1798,   123,  3650,  4726,  5230,   145,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
  4786,   135,   nil,   153,   nil,    98,   134,  5086,   nil,   163,
   101,   167,   147,     6,  4462,   nil,   151,   181,   154,    30,
   191,   nil,    -8,   nil,   202,  3850,  3706,   nil,   nil,   nil,
  5914,   nil,   nil,  5968,   nil,   nil,   nil,   170,    -2,  6022,
   234,  1618,   233,   nil,   nil,   nil,   nil,  6076,  6130,   239,
   179,   nil,   nil,   nil,  6184,   120,   nil,   730,   250,   228,
   nil,   255,   259,   nil,   nil,   nil,   263,   264,   268,   nil,
   670,   nil,   nil,   nil,   254,   274,   nil,   nil,   275,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   310,
   nil,   226,    82,   nil,   nil,   nil,   284,   nil,   nil,   nil,
   285,   nil,   287,   nil,   288,   nil,   nil,   nil,   nil,   nil ]

racc_action_default = [
  -236,  -237,    -1,    -2,    -3,    -4,    -5,    -8,   -10,   -11,
   -16,  -109,  -237,  -237,  -237,  -237,   -46,   -47,   -48,   -49,
   -50,   -51,   -52,   -53,   -54,   -55,   -56,   -57,   -58,   -59,
   -60,   -61,   -62,   -63,   -64,   -65,   -66,   -67,   -68,   -69,
   -74,   -75,   -79,  -237,  -237,  -237,  -237,  -237,  -120,  -122,
  -237,  -237,  -169,  -170,  -171,  -172,  -173,  -237,  -237,  -237,
  -186,  -187,  -188,  -189,  -190,  -237,  -192,  -237,  -203,  -206,
  -237,  -211,  -212,  -213,  -214,  -215,  -216,  -217,  -237,  -237,
    -7,  -237,  -237,  -237,  -237,  -237,  -237,  -237,  -237,  -237,
  -237,  -237,  -237,  -237,  -237,  -237,  -237,  -237,  -237,  -237,
  -237,  -237,  -237,  -237,  -237,  -237,  -237,  -237,  -237,  -237,
  -129,  -124,  -236,  -236,   -28,  -237,   -29,   -36,  -237,  -237,
   -76,  -237,  -237,  -237,  -237,   -86,  -237,  -237,  -237,  -237,
  -237,  -236,  -139,  -160,  -161,  -121,  -236,  -236,  -148,  -150,
  -151,  -152,  -153,  -154,  -156,  -157,   -44,  -237,  -176,  -237,
  -179,  -237,  -237,  -182,  -183,  -196,  -191,  -237,  -199,  -237,
  -237,  -237,  -237,  -237,   410,    -6,    -9,   -12,   -13,   -14,
   -15,  -237,   -18,   -19,   -20,   -21,   -22,   -23,   -24,   -25,
   -26,   -27,   -30,   -31,   -32,   -33,   -34,   -35,   -37,   -38,
   -39,   -40,   -41,  -237,   -42,  -104,  -237,   -80,  -237,  -229,
  -235,  -223,  -220,  -218,  -118,  -130,  -212,  -133,  -216,  -237,
  -226,  -224,  -232,  -214,  -215,  -222,  -227,  -228,  -230,  -231,
  -233,  -129,  -128,  -237,  -127,  -237,   -43,  -218,   -71,   -81,
  -237,   -84,  -218,  -165,  -168,  -237,   -78,  -237,  -237,  -237,
  -129,  -237,  -220,  -236,  -162,  -237,  -237,  -237,  -237,  -158,
  -237,  -237,  -237,  -174,  -237,  -177,  -237,  -180,  -237,  -193,
  -194,  -195,  -197,  -237,  -200,  -201,  -202,  -218,  -204,  -207,
  -209,  -210,  -109,  -237,   -17,  -237,  -237,  -218,  -106,  -129,
  -117,  -237,  -221,  -237,  -219,  -237,  -237,  -218,  -132,  -134,
  -223,  -224,  -225,  -226,  -229,  -232,  -234,  -235,  -125,  -126,
  -219,  -237,   -73,  -237,   -83,  -237,  -219,  -237,   -77,  -237,
   -89,  -237,   -95,  -237,  -237,   -99,  -220,  -218,  -220,  -237,
  -237,  -142,  -237,  -163,  -218,  -236,  -237,  -149,  -159,  -155,
   -45,  -175,  -178,  -185,  -181,  -184,  -198,  -237,  -237,  -108,
  -237,  -219,  -218,  -112,  -119,  -113,  -131,  -135,  -136,  -237,
   -70,   -82,   -85,  -166,  -167,   -89,   -88,  -237,  -237,   -95,
   -94,  -237,  -237,  -103,   -98,  -100,  -237,  -237,  -237,  -115,
  -236,  -143,  -144,  -145,  -237,  -237,  -140,  -141,  -237,  -147,
  -205,  -208,  -105,  -107,  -116,  -123,   -72,   -87,   -90,  -237,
   -93,  -237,  -237,  -110,  -111,  -114,  -237,  -164,  -137,  -146,
  -237,   -92,  -237,   -97,  -237,  -102,  -138,   -91,   -96,  -101 ]

racc_goto_table = [
     2,   136,     4,   120,   114,   116,   117,   118,   142,   140,
   269,   156,   203,   202,   232,   281,   360,   243,   195,   375,
   356,   327,   246,   328,   223,   225,   315,   229,   166,    80,
   344,   279,   194,   242,   346,   124,   126,   127,   128,   167,
   168,   169,   170,   283,   362,   277,   147,   149,   314,   146,
   146,   151,   320,   267,   371,   319,   247,   155,   388,   329,
   353,   335,   162,   390,   396,   387,   264,   301,   265,     3,
   262,   263,   305,   261,   158,   171,   160,     1,   146,   172,
   173,   174,   175,   176,   177,   178,   179,   180,   181,   182,
   183,   184,   185,   186,   187,   188,   189,   190,   191,   192,
   193,   365,   198,   165,   222,   222,   278,   337,   227,   nil,
   nil,   146,   235,   nil,   nil,   146,   nil,   340,   nil,   nil,
   nil,   nil,   198,   287,   nil,   nil,   nil,   349,   nil,   366,
   nil,   368,   nil,   244,   nil,   nil,   nil,   324,   244,   249,
   nil,   nil,   317,   316,   318,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   272,   nil,   367,   nil,   nil,
   266,   136,   nil,   273,   374,   nil,   nil,   nil,   nil,   142,
   140,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   342,   384,   nil,   nil,   nil,   381,   nil,   193,   nil,
   302,   124,   126,   127,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   142,   140,   142,   140,   336,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   303,   146,   198,   198,   nil,   nil,   nil,   309,   311,   nil,
   nil,   nil,   nil,   nil,   330,   321,   330,   nil,   333,   nil,
   151,   383,   nil,   nil,   nil,   155,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   330,   339,   nil,
   nil,   nil,   nil,   372,   198,   nil,   nil,   347,   348,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   330,   nil,   nil,   nil,   nil,   nil,   nil,   354,
   nil,   nil,   nil,   nil,   nil,   nil,   146,   nil,   nil,   nil,
   nil,   nil,   386,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   378,   377,   nil,   nil,
   nil,   nil,   nil,   193,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   124,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   377,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   400,
   nil,   402,   404 ]

racc_goto_check = [
     2,    65,     4,    40,    10,    10,    10,    10,    32,    38,
    90,    83,    57,    55,    45,    56,    48,    66,    52,    67,
    47,    73,    66,    73,    61,    61,    50,    44,     7,     6,
    58,    59,    13,    55,    62,    10,    10,    10,    10,     8,
     8,     8,     8,    39,    51,    53,    12,    12,    49,    10,
    10,    10,    69,    45,    70,    56,    72,    10,    46,    75,
    76,    78,    10,    48,    67,    47,    79,    39,    80,     3,
    84,    85,    39,    87,    88,    12,    89,     1,    10,    10,
    10,    10,    10,    10,    10,    10,    10,    10,    10,    10,
    10,    10,    10,    10,    10,    10,    10,    10,    10,    10,
    10,    50,    10,     6,    10,    10,    52,    39,    12,   nil,
   nil,    10,    12,   nil,   nil,    10,   nil,    39,   nil,   nil,
   nil,   nil,    10,    57,   nil,   nil,   nil,    39,   nil,    56,
   nil,    56,   nil,     4,   nil,   nil,   nil,    45,     4,     4,
   nil,   nil,    57,    55,    55,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,    10,   nil,    39,   nil,   nil,
     2,    65,   nil,     2,    39,   nil,   nil,   nil,   nil,    32,
    38,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,    57,    39,   nil,   nil,   nil,    90,   nil,    10,   nil,
    40,    10,    10,    10,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,    32,    38,    32,    38,    83,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
     2,    10,    10,    10,   nil,   nil,   nil,     2,     2,   nil,
   nil,   nil,   nil,   nil,    10,     4,    10,   nil,    10,   nil,
    10,    52,   nil,   nil,   nil,    10,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,    10,    10,   nil,
   nil,   nil,   nil,    65,    10,   nil,   nil,    10,    10,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,    10,   nil,   nil,   nil,   nil,   nil,   nil,    10,
   nil,   nil,   nil,   nil,   nil,   nil,    10,   nil,   nil,   nil,
   nil,   nil,    40,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,     2,     4,   nil,   nil,
   nil,   nil,   nil,    10,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    10,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,     4,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,     2,
   nil,     2,     2 ]

racc_goto_pointer = [
   nil,    77,     0,    69,     2,   nil,    24,   -53,   -43,   nil,
    -8,   nil,   -11,   -76,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   -43,   nil,   nil,   nil,   nil,   nil,   -42,  -160,
   -38,   nil,   nil,   nil,   -94,  -108,  -299,  -290,  -296,  -191,
  -213,  -269,   -90,  -151,   nil,   -97,  -187,   -98,  -252,  -167,
   nil,   -88,  -250,   nil,   nil,   -49,  -114,  -306,   nil,  -191,
  -268,   nil,   -81,  -227,   nil,  -192,  -246,   nil,  -197,   -93,
   -91,   nil,   nil,   -54,   -87,   -86,   nil,   -84,     7,     8,
  -152 ]

racc_goto_default = [
   nil,   nil,   376,   nil,   224,     5,     6,     7,     8,     9,
    11,    10,   313,   nil,    16,    40,    17,    18,    19,    20,
    21,    22,    23,    24,    25,    26,    27,    28,    29,    30,
    31,    32,    33,    34,    35,    36,    37,    38,    39,   nil,
   nil,    41,    42,   121,   nil,   nil,   125,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,    46,   nil,   nil,   nil,   204,   nil,
   111,   nil,   205,   209,   207,   132,   nil,   nil,   131,   nil,
   nil,   137,   nil,   138,   139,   143,   233,   152,   154,    60,
    61,    62,    65,   nil,   nil,   nil,   157,   nil,   nil,   nil,
   nil ]

racc_reduce_table = [
  0, 0, :racc_error,
  1, 95, :_reduce_1,
  1, 95, :_reduce_2,
  1, 95, :_reduce_none,
  1, 96, :_reduce_4,
  1, 99, :_reduce_5,
  3, 99, :_reduce_6,
  2, 99, :_reduce_7,
  1, 100, :_reduce_8,
  3, 100, :_reduce_9,
  1, 101, :_reduce_none,
  1, 102, :_reduce_11,
  3, 102, :_reduce_12,
  3, 102, :_reduce_13,
  3, 102, :_reduce_14,
  3, 102, :_reduce_15,
  1, 104, :_reduce_none,
  4, 104, :_reduce_17,
  3, 104, :_reduce_18,
  3, 104, :_reduce_19,
  3, 104, :_reduce_20,
  3, 104, :_reduce_21,
  3, 104, :_reduce_22,
  3, 104, :_reduce_23,
  3, 104, :_reduce_24,
  3, 104, :_reduce_25,
  3, 104, :_reduce_26,
  3, 104, :_reduce_27,
  2, 104, :_reduce_28,
  2, 104, :_reduce_29,
  3, 104, :_reduce_30,
  3, 104, :_reduce_31,
  3, 104, :_reduce_32,
  3, 104, :_reduce_33,
  3, 104, :_reduce_34,
  3, 104, :_reduce_35,
  2, 104, :_reduce_36,
  3, 104, :_reduce_37,
  3, 104, :_reduce_38,
  3, 104, :_reduce_39,
  3, 104, :_reduce_40,
  3, 104, :_reduce_41,
  3, 104, :_reduce_42,
  3, 104, :_reduce_43,
  1, 106, :_reduce_44,
  3, 106, :_reduce_45,
  1, 105, :_reduce_none,
  1, 109, :_reduce_none,
  1, 109, :_reduce_none,
  1, 109, :_reduce_none,
  1, 109, :_reduce_none,
  1, 109, :_reduce_none,
  1, 109, :_reduce_none,
  1, 109, :_reduce_none,
  1, 109, :_reduce_none,
  1, 109, :_reduce_none,
  1, 109, :_reduce_none,
  1, 109, :_reduce_none,
  1, 109, :_reduce_none,
  1, 110, :_reduce_none,
  1, 110, :_reduce_none,
  1, 110, :_reduce_none,
  1, 110, :_reduce_none,
  1, 110, :_reduce_none,
  1, 110, :_reduce_none,
  1, 110, :_reduce_none,
  1, 110, :_reduce_none,
  1, 110, :_reduce_none,
  1, 127, :_reduce_68,
  1, 127, :_reduce_69,
  5, 108, :_reduce_70,
  3, 108, :_reduce_71,
  6, 108, :_reduce_72,
  4, 108, :_reduce_73,
  1, 108, :_reduce_74,
  1, 112, :_reduce_75,
  2, 112, :_reduce_76,
  4, 135, :_reduce_77,
  3, 135, :_reduce_78,
  1, 135, :_reduce_79,
  3, 136, :_reduce_80,
  2, 134, :_reduce_81,
  3, 138, :_reduce_82,
  2, 138, :_reduce_83,
  2, 137, :_reduce_84,
  4, 137, :_reduce_85,
  2, 115, :_reduce_86,
  5, 140, :_reduce_87,
  4, 140, :_reduce_88,
  0, 141, :_reduce_none,
  2, 141, :_reduce_90,
  4, 141, :_reduce_91,
  3, 141, :_reduce_92,
  6, 116, :_reduce_93,
  5, 116, :_reduce_94,
  0, 142, :_reduce_none,
  4, 142, :_reduce_96,
  3, 142, :_reduce_97,
  5, 114, :_reduce_98,
  1, 143, :_reduce_99,
  2, 143, :_reduce_100,
  5, 144, :_reduce_101,
  4, 144, :_reduce_102,
  1, 145, :_reduce_103,
  1, 107, :_reduce_none,
  4, 107, :_reduce_105,
  1, 147, :_reduce_106,
  3, 147, :_reduce_107,
  3, 146, :_reduce_108,
  1, 103, :_reduce_109,
  6, 103, :_reduce_110,
  6, 103, :_reduce_111,
  5, 103, :_reduce_112,
  5, 103, :_reduce_113,
  6, 103, :_reduce_114,
  5, 103, :_reduce_115,
  4, 152, :_reduce_116,
  1, 153, :_reduce_117,
  1, 149, :_reduce_118,
  3, 149, :_reduce_119,
  1, 148, :_reduce_120,
  2, 148, :_reduce_121,
  1, 148, :_reduce_122,
  6, 113, :_reduce_123,
  2, 113, :_reduce_124,
  3, 154, :_reduce_125,
  3, 154, :_reduce_126,
  1, 155, :_reduce_none,
  1, 155, :_reduce_none,
  0, 151, :_reduce_129,
  1, 151, :_reduce_130,
  3, 151, :_reduce_131,
  1, 157, :_reduce_none,
  1, 157, :_reduce_none,
  1, 157, :_reduce_none,
  3, 156, :_reduce_135,
  3, 156, :_reduce_136,
  6, 117, :_reduce_137,
  7, 118, :_reduce_138,
  1, 162, :_reduce_139,
  1, 161, :_reduce_none,
  1, 161, :_reduce_none,
  1, 163, :_reduce_none,
  2, 163, :_reduce_143,
  1, 164, :_reduce_none,
  1, 164, :_reduce_none,
  6, 119, :_reduce_146,
  5, 119, :_reduce_147,
  1, 165, :_reduce_148,
  3, 165, :_reduce_149,
  1, 167, :_reduce_150,
  1, 167, :_reduce_151,
  1, 167, :_reduce_152,
  1, 167, :_reduce_none,
  1, 168, :_reduce_154,
  3, 168, :_reduce_155,
  1, 169, :_reduce_none,
  1, 169, :_reduce_none,
  1, 166, :_reduce_none,
  2, 166, :_reduce_159,
  1, 159, :_reduce_160,
  1, 159, :_reduce_161,
  1, 160, :_reduce_162,
  2, 160, :_reduce_163,
  4, 160, :_reduce_164,
  1, 139, :_reduce_165,
  3, 139, :_reduce_166,
  3, 170, :_reduce_167,
  1, 170, :_reduce_168,
  1, 111, :_reduce_169,
  1, 121, :_reduce_170,
  1, 121, :_reduce_171,
  1, 121, :_reduce_172,
  1, 121, :_reduce_173,
  3, 122, :_reduce_174,
  4, 122, :_reduce_175,
  2, 122, :_reduce_176,
  3, 122, :_reduce_177,
  4, 122, :_reduce_178,
  2, 122, :_reduce_179,
  3, 125, :_reduce_180,
  4, 125, :_reduce_181,
  2, 125, :_reduce_182,
  1, 171, :_reduce_183,
  3, 171, :_reduce_184,
  3, 172, :_reduce_185,
  1, 132, :_reduce_none,
  1, 132, :_reduce_none,
  1, 132, :_reduce_none,
  1, 173, :_reduce_189,
  1, 173, :_reduce_190,
  2, 174, :_reduce_191,
  1, 176, :_reduce_192,
  1, 178, :_reduce_193,
  1, 179, :_reduce_194,
  2, 177, :_reduce_195,
  1, 180, :_reduce_196,
  1, 181, :_reduce_197,
  2, 181, :_reduce_198,
  2, 175, :_reduce_199,
  2, 182, :_reduce_200,
  2, 182, :_reduce_201,
  3, 97, :_reduce_202,
  0, 183, :_reduce_203,
  2, 183, :_reduce_204,
  4, 183, :_reduce_205,
  1, 120, :_reduce_206,
  3, 120, :_reduce_207,
  5, 120, :_reduce_208,
  1, 184, :_reduce_none,
  1, 184, :_reduce_none,
  1, 128, :_reduce_211,
  1, 131, :_reduce_212,
  1, 129, :_reduce_213,
  1, 130, :_reduce_214,
  1, 124, :_reduce_215,
  1, 123, :_reduce_216,
  1, 126, :_reduce_217,
  0, 133, :_reduce_none,
  1, 133, :_reduce_219,
  0, 150, :_reduce_none,
  1, 150, :_reduce_none,
  1, 158, :_reduce_none,
  1, 158, :_reduce_none,
  1, 158, :_reduce_none,
  1, 158, :_reduce_none,
  1, 158, :_reduce_none,
  1, 158, :_reduce_none,
  1, 158, :_reduce_none,
  1, 158, :_reduce_none,
  1, 158, :_reduce_none,
  1, 158, :_reduce_none,
  1, 158, :_reduce_none,
  1, 158, :_reduce_none,
  1, 158, :_reduce_none,
  1, 158, :_reduce_none,
  0, 98, :_reduce_236 ]

racc_reduce_n = 237

racc_shift_n = 410

racc_token_table = {
  false => 0,
  :error => 1,
  :STRING => 2,
  :DQPRE => 3,
  :DQMID => 4,
  :DQPOST => 5,
  :WORD => 6,
  :LBRACK => 7,
  :RBRACK => 8,
  :LBRACE => 9,
  :RBRACE => 10,
  :SYMBOL => 11,
  :FARROW => 12,
  :COMMA => 13,
  :TRUE => 14,
  :FALSE => 15,
  :EQUALS => 16,
  :APPENDS => 17,
  :DELETES => 18,
  :LESSEQUAL => 19,
  :NOTEQUAL => 20,
  :DOT => 21,
  :COLON => 22,
  :LLCOLLECT => 23,
  :RRCOLLECT => 24,
  :QMARK => 25,
  :LPAREN => 26,
  :RPAREN => 27,
  :ISEQUAL => 28,
  :GREATEREQUAL => 29,
  :GREATERTHAN => 30,
  :LESSTHAN => 31,
  :IF => 32,
  :ELSE => 33,
  :DEFINE => 34,
  :ELSIF => 35,
  :VARIABLE => 36,
  :CLASS => 37,
  :INHERITS => 38,
  :NODE => 39,
  :BOOLEAN => 40,
  :NAME => 41,
  :SEMIC => 42,
  :CASE => 43,
  :DEFAULT => 44,
  :AT => 45,
  :ATAT => 46,
  :LCOLLECT => 47,
  :RCOLLECT => 48,
  :CLASSREF => 49,
  :NOT => 50,
  :OR => 51,
  :AND => 52,
  :UNDEF => 53,
  :PARROW => 54,
  :PLUS => 55,
  :MINUS => 56,
  :TIMES => 57,
  :DIV => 58,
  :LSHIFT => 59,
  :RSHIFT => 60,
  :UMINUS => 61,
  :MATCH => 62,
  :NOMATCH => 63,
  :REGEX => 64,
  :IN_EDGE => 65,
  :OUT_EDGE => 66,
  :IN_EDGE_SUB => 67,
  :OUT_EDGE_SUB => 68,
  :IN => 69,
  :UNLESS => 70,
  :PIPE => 71,
  :LAMBDA => 72,
  :SELBRACE => 73,
  :NUMBER => 74,
  :HEREDOC => 75,
  :SUBLOCATE => 76,
  :RENDER_STRING => 77,
  :RENDER_EXPR => 78,
  :EPP_START => 79,
  :EPP_END => 80,
  :EPP_END_TRIM => 81,
  :FUNCTION => 82,
  :PRIVATE => 83,
  :ATTR => 84,
  :TYPE => 85,
  :LOW => 86,
  :HIGH => 87,
  :CALL => 88,
  :LISTSTART => 89,
  :SPLAT => 90,
  :MODULO => 91,
  :TITLE_COLON => 92,
  :CASE_COLON => 93 }

racc_nt_base = 94

racc_use_result_var = true

Racc_arg = [
  racc_action_table,
  racc_action_check,
  racc_action_default,
  racc_action_pointer,
  racc_goto_table,
  racc_goto_check,
  racc_goto_default,
  racc_goto_pointer,
  racc_nt_base,
  racc_reduce_table,
  racc_token_table,
  racc_shift_n,
  racc_reduce_n,
  racc_use_result_var ]

Racc_token_to_s_table = [
  "$end",
  "error",
  "STRING",
  "DQPRE",
  "DQMID",
  "DQPOST",
  "WORD",
  "LBRACK",
  "RBRACK",
  "LBRACE",
  "RBRACE",
  "SYMBOL",
  "FARROW",
  "COMMA",
  "TRUE",
  "FALSE",
  "EQUALS",
  "APPENDS",
  "DELETES",
  "LESSEQUAL",
  "NOTEQUAL",
  "DOT",
  "COLON",
  "LLCOLLECT",
  "RRCOLLECT",
  "QMARK",
  "LPAREN",
  "RPAREN",
  "ISEQUAL",
  "GREATEREQUAL",
  "GREATERTHAN",
  "LESSTHAN",
  "IF",
  "ELSE",
  "DEFINE",
  "ELSIF",
  "VARIABLE",
  "CLASS",
  "INHERITS",
  "NODE",
  "BOOLEAN",
  "NAME",
  "SEMIC",
  "CASE",
  "DEFAULT",
  "AT",
  "ATAT",
  "LCOLLECT",
  "RCOLLECT",
  "CLASSREF",
  "NOT",
  "OR",
  "AND",
  "UNDEF",
  "PARROW",
  "PLUS",
  "MINUS",
  "TIMES",
  "DIV",
  "LSHIFT",
  "RSHIFT",
  "UMINUS",
  "MATCH",
  "NOMATCH",
  "REGEX",
  "IN_EDGE",
  "OUT_EDGE",
  "IN_EDGE_SUB",
  "OUT_EDGE_SUB",
  "IN",
  "UNLESS",
  "PIPE",
  "LAMBDA",
  "SELBRACE",
  "NUMBER",
  "HEREDOC",
  "SUBLOCATE",
  "RENDER_STRING",
  "RENDER_EXPR",
  "EPP_START",
  "EPP_END",
  "EPP_END_TRIM",
  "FUNCTION",
  "PRIVATE",
  "ATTR",
  "TYPE",
  "LOW",
  "HIGH",
  "CALL",
  "LISTSTART",
  "SPLAT",
  "MODULO",
  "TITLE_COLON",
  "CASE_COLON",
  "$start",
  "program",
  "statements",
  "epp_expression",
  "nil",
  "syntactic_statements",
  "syntactic_statement",
  "any_expression",
  "relationship_expression",
  "resource_expression",
  "expression",
  "higher_precedence",
  "expressions",
  "selector_entries",
  "call_function_expression",
  "primary_expression",
  "literal_expression",
  "variable",
  "call_method_with_lambda_expression",
  "collection_expression",
  "case_expression",
  "if_expression",
  "unless_expression",
  "definition_expression",
  "hostclass_expression",
  "node_definition_expression",
  "epp_render_expression",
  "reserved_word",
  "array",
  "boolean",
  "default",
  "hash",
  "regex",
  "text_or_name",
  "number",
  "type",
  "undef",
  "name",
  "quotedtext",
  "endcomma",
  "lambda",
  "call_method_expression",
  "named_access",
  "lambda_parameter_list",
  "lambda_rest",
  "parameters",
  "if_part",
  "else",
  "unless_else",
  "case_options",
  "case_option",
  "case_colon",
  "selector_entry",
  "selector_entry_list",
  "at",
  "resourceinstances",
  "endsemi",
  "attribute_operations",
  "resourceinst",
  "title_colon",
  "collect_query",
  "optional_query",
  "attribute_operation",
  "attribute_name",
  "keyword",
  "classname",
  "parameter_list",
  "opt_statements",
  "stacked_classname",
  "classparent",
  "classnameordefault",
  "hostnames",
  "nodeparent",
  "hostname",
  "dotted_name",
  "name_or_number",
  "parameter",
  "hashpairs",
  "hashpair",
  "string",
  "dq_string",
  "heredoc",
  "dqpre",
  "dqrval",
  "dqpost",
  "dqmid",
  "text_expression",
  "dqtail",
  "sublocated_text",
  "epp_parameters_list",
  "epp_end" ]

Racc_debug_parser = false

##### State transition tables end #####

# reduce 0 omitted

module_eval(<<'.,.,', 'egrammar.ra', 68)
  def _reduce_1(val, _values, result)
     result = create_program(Factory.block_or_expression(*val[0])) 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 69)
  def _reduce_2(val, _values, result)
     result = create_program(Factory.block_or_expression(*val[0])) 
    result
  end
.,.,

# reduce 3 omitted

module_eval(<<'.,.,', 'egrammar.ra', 74)
  def _reduce_4(val, _values, result)
     result = transform_calls(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 80)
  def _reduce_5(val, _values, result)
     result = [val[0]]
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 81)
  def _reduce_6(val, _values, result)
     result = val[0].push val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 82)
  def _reduce_7(val, _values, result)
     result = val[0].push val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 86)
  def _reduce_8(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 87)
  def _reduce_9(val, _values, result)
     result = aryfy(val[0]).push val[2] 
    result
  end
.,.,

# reduce 10 omitted

module_eval(<<'.,.,', 'egrammar.ra', 93)
  def _reduce_11(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 94)
  def _reduce_12(val, _values, result)
     result = val[0].relop(val[1][:value], val[2]); loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 95)
  def _reduce_13(val, _values, result)
     result = val[0].relop(val[1][:value], val[2]); loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 96)
  def _reduce_14(val, _values, result)
     result = val[0].relop(val[1][:value], val[2]); loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 97)
  def _reduce_15(val, _values, result)
     result = val[0].relop(val[1][:value], val[2]); loc result, val[1] 
    result
  end
.,.,

# reduce 16 omitted

module_eval(<<'.,.,', 'egrammar.ra', 104)
  def _reduce_17(val, _values, result)
     result = val[0][*val[2]]         ; loc result, val[0], val[3] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 105)
  def _reduce_18(val, _values, result)
     result = val[0].in val[2]        ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 106)
  def _reduce_19(val, _values, result)
     result = val[0] =~  val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 107)
  def _reduce_20(val, _values, result)
     result = val[0].mne val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 108)
  def _reduce_21(val, _values, result)
     result = val[0] +   val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 109)
  def _reduce_22(val, _values, result)
     result = val[0] -   val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 110)
  def _reduce_23(val, _values, result)
     result = val[0] /   val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 111)
  def _reduce_24(val, _values, result)
     result = val[0] *   val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 112)
  def _reduce_25(val, _values, result)
     result = val[0] %   val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 113)
  def _reduce_26(val, _values, result)
     result = val[0] <<  val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 114)
  def _reduce_27(val, _values, result)
     result = val[0] >>  val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 115)
  def _reduce_28(val, _values, result)
     result = val[1].minus()          ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 116)
  def _reduce_29(val, _values, result)
     result = val[1].unfold()         ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 117)
  def _reduce_30(val, _values, result)
     result = val[0].ne  val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 118)
  def _reduce_31(val, _values, result)
     result = val[0] ==  val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 119)
  def _reduce_32(val, _values, result)
     result = val[0] >   val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 120)
  def _reduce_33(val, _values, result)
     result = val[0] >=  val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 121)
  def _reduce_34(val, _values, result)
     result = val[0] <   val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 122)
  def _reduce_35(val, _values, result)
     result = val[0] <=  val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 123)
  def _reduce_36(val, _values, result)
     result = val[1].not              ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 124)
  def _reduce_37(val, _values, result)
     result = val[0].and val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 125)
  def _reduce_38(val, _values, result)
     result = val[0].or  val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 126)
  def _reduce_39(val, _values, result)
     result = val[0].set(val[2])      ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 127)
  def _reduce_40(val, _values, result)
     result = val[0].plus_set(val[2]) ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 128)
  def _reduce_41(val, _values, result)
     result = val[0].minus_set(val[2]); loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 129)
  def _reduce_42(val, _values, result)
     result = val[0].select(*val[2])  ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 130)
  def _reduce_43(val, _values, result)
     result = val[1].paren()          ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 138)
  def _reduce_44(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 139)
  def _reduce_45(val, _values, result)
     result = val[0].push(val[2]) 
    result
  end
.,.,

# reduce 46 omitted

# reduce 47 omitted

# reduce 48 omitted

# reduce 49 omitted

# reduce 50 omitted

# reduce 51 omitted

# reduce 52 omitted

# reduce 53 omitted

# reduce 54 omitted

# reduce 55 omitted

# reduce 56 omitted

# reduce 57 omitted

# reduce 58 omitted

# reduce 59 omitted

# reduce 60 omitted

# reduce 61 omitted

# reduce 62 omitted

# reduce 63 omitted

# reduce 64 omitted

# reduce 65 omitted

# reduce 66 omitted

# reduce 67 omitted

module_eval(<<'.,.,', 'egrammar.ra', 172)
  def _reduce_68(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 173)
  def _reduce_69(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 181)
  def _reduce_70(val, _values, result)
          result = Factory.CALL_NAMED(val[0], true, val[2])
      loc result, val[0], val[4]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 185)
  def _reduce_71(val, _values, result)
          result = Factory.CALL_NAMED(val[0], true, [])
      loc result, val[0], val[2]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 189)
  def _reduce_72(val, _values, result)
          result = Factory.CALL_NAMED(val[0], true, val[2])
      loc result, val[0], val[4]
      result.lambda = val[5]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 194)
  def _reduce_73(val, _values, result)
          result = Factory.CALL_NAMED(val[0], true, [])
      loc result, val[0], val[2]
      result.lambda = val[3]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 198)
  def _reduce_74(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 203)
  def _reduce_75(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 204)
  def _reduce_76(val, _values, result)
     result = val[0]; val[0].lambda = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 207)
  def _reduce_77(val, _values, result)
     result = Factory.CALL_METHOD(val[0], val[2]); loc result, val[1], val[3] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 208)
  def _reduce_78(val, _values, result)
     result = Factory.CALL_METHOD(val[0], []); loc result, val[1], val[3] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 209)
  def _reduce_79(val, _values, result)
     result = Factory.CALL_METHOD(val[0], []); loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 214)
  def _reduce_80(val, _values, result)
            result = val[0].dot(Factory.fqn(val[2][:value]))
        loc result, val[1], val[2]
      
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 226)
  def _reduce_81(val, _values, result)
          result = Factory.LAMBDA(val[0], val[1])
#      loc result, val[1] # TODO
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 231)
  def _reduce_82(val, _values, result)
     result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 232)
  def _reduce_83(val, _values, result)
     result = nil 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 236)
  def _reduce_84(val, _values, result)
     result = [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 237)
  def _reduce_85(val, _values, result)
     result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 247)
  def _reduce_86(val, _values, result)
          result = val[1]
      loc(result, val[0], val[1])
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 254)
  def _reduce_87(val, _values, result)
            result = Factory.IF(val[0], Factory.block_or_expression(*val[2]), val[4])
        loc(result, val[0], (val[4] ? val[4] : val[3]))
      
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 258)
  def _reduce_88(val, _values, result)
            result = Factory.IF(val[0], nil, val[3])
        loc(result, val[0], (val[3] ? val[3] : val[2]))
      
    result
  end
.,.,

# reduce 89 omitted

module_eval(<<'.,.,', 'egrammar.ra', 266)
  def _reduce_90(val, _values, result)
            result = val[1]
        loc(result, val[0], val[1])
      
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 270)
  def _reduce_91(val, _values, result)
            result = Factory.block_or_expression(*val[2])
        loc result, val[0], val[3]
      
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 274)
  def _reduce_92(val, _values, result)
            result = nil # don't think a nop is needed here either
      
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 283)
  def _reduce_93(val, _values, result)
          result = Factory.UNLESS(val[1], Factory.block_or_expression(*val[3]), val[5])
      loc result, val[0], val[4]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 287)
  def _reduce_94(val, _values, result)
          result = Factory.UNLESS(val[1], nil, nil)
      loc result, val[0], val[4]
    
    result
  end
.,.,

# reduce 95 omitted

module_eval(<<'.,.,', 'egrammar.ra', 297)
  def _reduce_96(val, _values, result)
            result = Factory.block_or_expression(*val[2])
        loc result, val[0], val[3]
      
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 301)
  def _reduce_97(val, _values, result)
            result = nil # don't think a nop is needed here either
      
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 309)
  def _reduce_98(val, _values, result)
          result = Factory.CASE(val[1], *val[3])
      loc result, val[0], val[4]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 315)
  def _reduce_99(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 316)
  def _reduce_100(val, _values, result)
     result = val[0].push val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 321)
  def _reduce_101(val, _values, result)
            result = Factory.WHEN(val[0], val[3])
        loc result, val[1], val[4]
      
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 325)
  def _reduce_102(val, _values, result)
            result = Factory.WHEN(val[0], nil)
        loc result, val[1], val[3]
      
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 329)
  def _reduce_103(val, _values, result)
     result = val[0] 
    result
  end
.,.,

# reduce 104 omitted

module_eval(<<'.,.,', 'egrammar.ra', 340)
  def _reduce_105(val, _values, result)
            result = val[1]
      
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 345)
  def _reduce_106(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 346)
  def _reduce_107(val, _values, result)
     result = val[0].push val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 351)
  def _reduce_108(val, _values, result)
     result = Factory.MAP(val[0], val[2]) ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 363)
  def _reduce_109(val, _values, result)
          result = val[0]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 366)
  def _reduce_110(val, _values, result)
          result = case Factory.resource_shape(val[1])
      when :resource, :class
        tmp = Factory.RESOURCE(Factory.fqn(token_text(val[1])), val[3])
        tmp.form = val[0]
        tmp
      when :defaults
        error val[1], "A resource default can not be virtual or exported"
      when :override
        error val[1], "A resource override can not be virtual or exported"
      else
        error val[1], "Expression is not valid as a resource, resource-default, or resource-override"
      end
      loc result, val[1], val[4]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 381)
  def _reduce_111(val, _values, result)
          result = case Factory.resource_shape(val[1])
      when :resource, :class, :defaults, :override
        error val[1], "Defaults are not virtualizable"
      else
        error val[1], "Expression is not valid as a resource, resource-default, or resource-override"
      end
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 389)
  def _reduce_112(val, _values, result)
          result = case Factory.resource_shape(val[0])
      when :resource, :class
        Factory.RESOURCE(Factory.fqn(token_text(val[0])), val[2])
      when :defaults
        error val[1], "A resource default can not specify a resource name"
      when :override
        error val[1], "A resource override does not allow override of name of resource"
      else
        error val[1], "Expression is not valid as a resource, resource-default, or resource-override"
      end
      loc result, val[0], val[4]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 402)
  def _reduce_113(val, _values, result)
          result = case Factory.resource_shape(val[0])
      when :resource, :class
        # This catches deprecated syntax.
        # If the attribute operations does not include +>, then the found expression
        # is actually a LEFT followed by LITERAL_HASH
        #
        unless tmp = transform_resource_wo_title(val[0], val[2])
          error val[1], "Syntax error resource body without title or hash with +>"
        end
        tmp
      when :defaults
        Factory.RESOURCE_DEFAULTS(val[0], val[2])
      when :override
        # This was only done for override in original - TODO shuld it be here at all
        Factory.RESOURCE_OVERRIDE(val[0], val[2])
      else
        error val[0], "Expression is not valid as a resource, resource-default, or resource-override"
      end
      loc result, val[0], val[4]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 423)
  def _reduce_114(val, _values, result)
            result = Factory.RESOURCE(Factory.fqn(token_text(val[1])), val[3])
        result.form = val[0]
        loc result, val[1], val[5]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 428)
  def _reduce_115(val, _values, result)
            result = Factory.RESOURCE(Factory.fqn(token_text(val[0])), val[2])
        loc result, val[0], val[4]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 433)
  def _reduce_116(val, _values, result)
     result = Factory.RESOURCE_BODY(val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 435)
  def _reduce_117(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 438)
  def _reduce_118(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 439)
  def _reduce_119(val, _values, result)
     result = val[0].push val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 444)
  def _reduce_120(val, _values, result)
     result = :virtual  
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 445)
  def _reduce_121(val, _values, result)
     result = :exported 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 446)
  def _reduce_122(val, _values, result)
     result = :exported 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 458)
  def _reduce_123(val, _values, result)
          result = Factory.COLLECT(val[0], val[1], val[3])
      loc result, val[0], val[5]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 462)
  def _reduce_124(val, _values, result)
          result = Factory.COLLECT(val[0], val[1], [])
      loc result, val[0], val[1]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 467)
  def _reduce_125(val, _values, result)
     result = Factory.VIRTUAL_QUERY(val[1])   ; loc result, val[0], val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 468)
  def _reduce_126(val, _values, result)
     result = Factory.EXPORTED_QUERY(val[1])  ; loc result, val[0], val[2] 
    result
  end
.,.,

# reduce 127 omitted

# reduce 128 omitted

module_eval(<<'.,.,', 'egrammar.ra', 481)
  def _reduce_129(val, _values, result)
     result = [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 482)
  def _reduce_130(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 483)
  def _reduce_131(val, _values, result)
     result = val[0].push(val[2]) 
    result
  end
.,.,

# reduce 132 omitted

# reduce 133 omitted

# reduce 134 omitted

module_eval(<<'.,.,', 'egrammar.ra', 499)
  def _reduce_135(val, _values, result)
            result = Factory.ATTRIBUTE_OP(val[0][:value], :'=>', val[2])
        loc result, val[0], val[2]
      
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 503)
  def _reduce_136(val, _values, result)
            result = Factory.ATTRIBUTE_OP(val[0][:value], :'+>', val[2])
        loc result, val[0], val[2]
      
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 513)
  def _reduce_137(val, _values, result)
          result = add_definition(Factory.DEFINITION(classname(val[1][:value]), val[2], val[4]))
      loc result, val[0], val[5]
      # New lexer does not keep track of this, this is done in validation
      if @lexer.respond_to?(:'indefine=')
        @lexer.indefine = false
      end
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 527)
  def _reduce_138(val, _values, result)
          # Remove this class' name from the namestack as all nested classes have been parsed
      namepop
      result = add_definition(Factory.HOSTCLASS(classname(val[1][:value]), val[2], token_text(val[3]), val[5]))
      loc result, val[0], val[6]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 537)
  def _reduce_139(val, _values, result)
     namestack(val[0][:value]) ; result = val[0] 
    result
  end
.,.,

# reduce 140 omitted

# reduce 141 omitted

# reduce 142 omitted

module_eval(<<'.,.,', 'egrammar.ra', 546)
  def _reduce_143(val, _values, result)
     result = val[1] 
    result
  end
.,.,

# reduce 144 omitted

# reduce 145 omitted

module_eval(<<'.,.,', 'egrammar.ra', 563)
  def _reduce_146(val, _values, result)
          result = add_definition(Factory.NODE(val[1], val[2], val[4]))
      loc result, val[0], val[5]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 567)
  def _reduce_147(val, _values, result)
          result = add_definition(Factory.NODE(val[1], val[2], nil))
      loc result, val[0], val[4]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 577)
  def _reduce_148(val, _values, result)
     result = [result] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 578)
  def _reduce_149(val, _values, result)
     result = val[0].push(val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 583)
  def _reduce_150(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 584)
  def _reduce_151(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 585)
  def _reduce_152(val, _values, result)
     result = Factory.literal(:default); loc result, val[0] 
    result
  end
.,.,

# reduce 153 omitted

module_eval(<<'.,.,', 'egrammar.ra', 589)
  def _reduce_154(val, _values, result)
     result = Factory.literal(val[0][:value]); loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 590)
  def _reduce_155(val, _values, result)
     result = Factory.concat(val[0], '.', val[2][:value]); loc result, val[0], val[2] 
    result
  end
.,.,

# reduce 156 omitted

# reduce 157 omitted

# reduce 158 omitted

module_eval(<<'.,.,', 'egrammar.ra', 599)
  def _reduce_159(val, _values, result)
     result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 615)
  def _reduce_160(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 616)
  def _reduce_161(val, _values, result)
     error val[0], "'class' is not a valid classname" 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 620)
  def _reduce_162(val, _values, result)
     result = [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 621)
  def _reduce_163(val, _values, result)
     result = [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 622)
  def _reduce_164(val, _values, result)
     result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 626)
  def _reduce_165(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 627)
  def _reduce_166(val, _values, result)
     result = val[0].push(val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 631)
  def _reduce_167(val, _values, result)
     result = Factory.PARAM(val[0][:value], val[2]) ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 632)
  def _reduce_168(val, _values, result)
     result = Factory.PARAM(val[0][:value]); loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 645)
  def _reduce_169(val, _values, result)
     result = Factory.fqn(val[0][:value]).var ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 650)
  def _reduce_170(val, _values, result)
     result = Factory.RESERVED(val[0][:value]) ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 651)
  def _reduce_171(val, _values, result)
     result = Factory.RESERVED(val[0][:value]) ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 652)
  def _reduce_172(val, _values, result)
     result = Factory.RESERVED(val[0][:value]) ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 653)
  def _reduce_173(val, _values, result)
     result = Factory.RESERVED(val[0][:value]) ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 659)
  def _reduce_174(val, _values, result)
     result = Factory.LIST(val[1]); loc result, val[0], val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 660)
  def _reduce_175(val, _values, result)
     result = Factory.LIST(val[1]); loc result, val[0], val[3] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 661)
  def _reduce_176(val, _values, result)
     result = Factory.literal([]) ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 662)
  def _reduce_177(val, _values, result)
     result = Factory.LIST(val[1]); loc result, val[0], val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 663)
  def _reduce_178(val, _values, result)
     result = Factory.LIST(val[1]); loc result, val[0], val[3] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 664)
  def _reduce_179(val, _values, result)
     result = Factory.literal([]) ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 667)
  def _reduce_180(val, _values, result)
     result = Factory.HASH(val[1]); loc result, val[0], val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 668)
  def _reduce_181(val, _values, result)
     result = Factory.HASH(val[1]); loc result, val[0], val[3] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 669)
  def _reduce_182(val, _values, result)
     result = Factory.literal({}) ; loc result, val[0], val[3] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 672)
  def _reduce_183(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 673)
  def _reduce_184(val, _values, result)
     result = val[0].push val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 676)
  def _reduce_185(val, _values, result)
     result = Factory.KEY_ENTRY(val[0], val[2]); loc result, val[1] 
    result
  end
.,.,

# reduce 186 omitted

# reduce 187 omitted

# reduce 188 omitted

module_eval(<<'.,.,', 'egrammar.ra', 684)
  def _reduce_189(val, _values, result)
     result = Factory.literal(val[0][:value]) ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 685)
  def _reduce_190(val, _values, result)
     result = Factory.literal(val[0][:value]) ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 687)
  def _reduce_191(val, _values, result)
     result = Factory.string(val[0], *val[1]) ; loc result, val[0], val[1][-1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 688)
  def _reduce_192(val, _values, result)
     result = Factory.literal(val[0][:value]); loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 689)
  def _reduce_193(val, _values, result)
     result = Factory.literal(val[0][:value]); loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 690)
  def _reduce_194(val, _values, result)
     result = Factory.literal(val[0][:value]); loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 691)
  def _reduce_195(val, _values, result)
     result = [val[0]] + val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 692)
  def _reduce_196(val, _values, result)
     result = Factory.TEXT(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 695)
  def _reduce_197(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 696)
  def _reduce_198(val, _values, result)
     result = [val[0]] + val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 699)
  def _reduce_199(val, _values, result)
     result = Factory.HEREDOC(val[0][:value], val[1]); loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 702)
  def _reduce_200(val, _values, result)
     result = Factory.SUBLOCATE(val[0], val[1]); loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 703)
  def _reduce_201(val, _values, result)
     result = Factory.SUBLOCATE(val[0], val[1]); loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 706)
  def _reduce_202(val, _values, result)
     result = Factory.EPP(val[1], val[2]); loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 709)
  def _reduce_203(val, _values, result)
     result = nil 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 710)
  def _reduce_204(val, _values, result)
     result = [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 711)
  def _reduce_205(val, _values, result)
     result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 714)
  def _reduce_206(val, _values, result)
     result = Factory.RENDER_STRING(val[0][:value]); loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 715)
  def _reduce_207(val, _values, result)
     result = Factory.RENDER_EXPR(val[1]); loc result, val[0], val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 716)
  def _reduce_208(val, _values, result)
     result = Factory.RENDER_EXPR(Factory.block_or_expression(*val[2])); loc result, val[0], val[4] 
    result
  end
.,.,

# reduce 209 omitted

# reduce 210 omitted

module_eval(<<'.,.,', 'egrammar.ra', 722)
  def _reduce_211(val, _values, result)
     result = Factory.NUMBER(val[0][:value]) ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 723)
  def _reduce_212(val, _values, result)
     result = Factory.QNAME_OR_NUMBER(val[0][:value]) ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 724)
  def _reduce_213(val, _values, result)
     result = Factory.QREF(val[0][:value])  ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 725)
  def _reduce_214(val, _values, result)
     result = Factory.literal(:undef); loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 726)
  def _reduce_215(val, _values, result)
     result = Factory.literal(:default); loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 731)
  def _reduce_216(val, _values, result)
     result = Factory.literal(val[0][:value]) ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 734)
  def _reduce_217(val, _values, result)
     result = Factory.literal(val[0][:value]); loc result, val[0] 
    result
  end
.,.,

# reduce 218 omitted

module_eval(<<'.,.,', 'egrammar.ra', 740)
  def _reduce_219(val, _values, result)
     result = nil 
    result
  end
.,.,

# reduce 220 omitted

# reduce 221 omitted

# reduce 222 omitted

# reduce 223 omitted

# reduce 224 omitted

# reduce 225 omitted

# reduce 226 omitted

# reduce 227 omitted

# reduce 228 omitted

# reduce 229 omitted

# reduce 230 omitted

# reduce 231 omitted

# reduce 232 omitted

# reduce 233 omitted

# reduce 234 omitted

# reduce 235 omitted

module_eval(<<'.,.,', 'egrammar.ra', 763)
  def _reduce_236(val, _values, result)
     result = nil
    result
  end
.,.,

def _reduce_none(val, _values, result)
  val[0]
end

      end   # class Parser
      end   # module Parser
    end   # module Pops
  end   # module Puppet
